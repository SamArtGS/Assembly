
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ensamblador;

import java.io.*;
import java.util.*;
import java_cup.runtime.*;
import java.math.BigInteger;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u014f\000\002\002\004\000\002\002\003\000\002\124" +
    "\002\000\002\125\002\000\002\002\010\000\002\117\003" +
    "\000\002\126\002\000\002\003\010\000\002\003\005\000" +
    "\002\127\002\000\002\003\006\000\002\003\003\000\002" +
    "\006\004\000\002\006\002\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\004\003\000\002\004\002\000\002\121\003\000" +
    "\002\121\003\000\002\122\003\000\002\122\003\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\007\000\002\007\007\000\002\007\011" +
    "\000\002\007\011\000\002\007\011\000\002\007\011\000" +
    "\002\007\007\000\002\007\011\000\002\007\011\000\002" +
    "\007\007\000\002\007\011\000\002\007\011\000\002\007" +
    "\007\000\002\007\007\000\002\007\007\000\002\007\007" +
    "\000\002\007\007\000\002\007\007\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\010\003\000\002\010\003\000\002\014\003\000\002\014" +
    "\003\000\002\011\003\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\120\003\000" +
    "\002\120\003\000\002\120\003\000\002\120\003\000\002" +
    "\120\003\000\002\120\003\000\002\120\003\000\002\120" +
    "\003\000\002\012\003\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\013\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\007\000\002" +
    "\015\011\000\002\015\011\000\002\016\005\000\002\016" +
    "\005\000\002\016\007\000\002\016\011\000\002\016\011" +
    "\000\002\017\005\000\002\017\005\000\002\017\007\000" +
    "\002\017\011\000\002\017\011\000\002\020\005\000\002" +
    "\020\005\000\002\020\007\000\002\020\011\000\002\020" +
    "\011\000\002\021\003\000\002\021\003\000\002\021\005" +
    "\000\002\021\007\000\002\021\007\000\002\022\003\000" +
    "\002\022\003\000\002\022\005\000\002\022\007\000\002" +
    "\022\007\000\002\023\003\000\002\023\003\000\002\023" +
    "\005\000\002\023\007\000\002\023\007\000\002\024\003" +
    "\000\002\024\003\000\002\024\005\000\002\024\007\000" +
    "\002\024\007\000\002\025\003\000\002\025\005\000\002" +
    "\025\007\000\002\025\007\000\002\026\003\000\002\026" +
    "\005\000\002\026\007\000\002\026\007\000\002\027\005" +
    "\000\002\027\006\000\002\027\010\000\002\027\010\000" +
    "\002\030\005\000\002\030\006\000\002\030\010\000\002" +
    "\030\010\000\002\031\005\000\002\031\006\000\002\031" +
    "\010\000\002\031\010\000\002\032\003\000\002\032\005" +
    "\000\002\033\002\000\002\033\003\000\002\034\002\000" +
    "\002\035\002\000\002\036\003\000\002\037\002\000\002" +
    "\040\002\000\002\041\002\000\002\042\002\000\002\043" +
    "\002\000\002\044\002\000\002\045\002\000\002\046\002" +
    "\000\002\047\002\000\002\050\002\000\002\051\002\000" +
    "\002\052\002\000\002\053\005\000\002\053\005\000\002" +
    "\053\007\000\002\053\007\000\002\053\007\000\002\054" +
    "\002\000\002\056\002\000\002\057\002\000\002\060\002" +
    "\000\002\061\002\000\002\062\002\000\002\063\002\000" +
    "\002\064\002\000\002\065\002\000\002\066\007\000\002" +
    "\066\007\000\002\066\007\000\002\067\002\000\002\070" +
    "\002\000\002\071\002\000\002\072\002\000\002\073\007" +
    "\000\002\073\007\000\002\074\002\000\002\075\002\000" +
    "\002\076\002\000\002\077\002\000\002\123\003\000\002" +
    "\123\003\000\002\123\003\000\002\123\003\000\002\123" +
    "\003\000\002\123\003\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\016\005\000\002\020\005\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\100\002\000" +
    "\002\101\002\000\002\102\002\000\002\103\002\000\002" +
    "\104\003\000\002\104\005\000\002\104\007\000\002\104" +
    "\007\000\002\105\003\000\002\105\005\000\002\105\007" +
    "\000\002\105\007\000\002\106\003\000\002\106\005\000" +
    "\002\106\007\000\002\106\007\000\002\107\003\000\002" +
    "\107\005\000\002\107\007\000\002\107\007\000\002\110" +
    "\003\000\002\110\005\000\002\110\007\000\002\110\007" +
    "\000\002\111\003\000\002\111\005\000\002\111\007\000" +
    "\002\111\007\000\002\112\003\000\002\112\005\000\002" +
    "\112\007\000\002\112\007\000\002\113\002\000\002\114" +
    "\002\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\006\000\002\007\006\000" +
    "\002\007\007\000\002\007\007\000\002\007\007\000\002" +
    "\007\007\000\002\007\010\000\002\007\010\000\002\007" +
    "\006\000\002\007\006\000\002\007\006\000\002\007\006" +
    "\000\002\007\007\000\002\007\007\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\115\003\000\002" +
    "\115\003\000\002\115\003\000\002\115\003\000\002\115" +
    "\003\000\002\115\003\000\002\116\003\000\002\116\003" +
    "\000\002\116\003\000\002\116\003\000\002\116\003\000" +
    "\002\116\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02a1\000\224\003\004\013\ufff4\014\ufff4\015\ufff4\016" +
    "\ufff4\031\005\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4" +
    "\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056" +
    "\ufff4\057\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4" +
    "\067\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4\074\ufff4\075" +
    "\ufff4\076\ufff4\077\ufff4\100\ufff4\101\ufff4\102\ufff4\103\ufff4" +
    "\104\ufff4\105\ufff4\106\ufff4\107\ufff4\110\ufff4\111\ufff4\112" +
    "\ufff4\113\ufff4\114\ufff4\115\ufff4\120\ufff4\121\ufff4\122\ufff4" +
    "\123\ufff4\124\ufff4\125\ufff4\126\ufff4\127\ufff4\130\ufff4\131" +
    "\ufff4\132\ufff4\133\ufff4\134\ufff4\135\ufff4\136\ufff4\137\ufff4" +
    "\140\ufff4\141\ufff4\142\ufff4\143\ufff4\144\ufff4\145\ufff4\146" +
    "\ufff4\147\ufff4\150\ufff4\151\010\001\002\000\006\002\ufff6" +
    "\032\ufff8\001\002\000\004\012\u02a0\001\002\000\004\002" +
    "\000\001\002\000\004\002\ufffc\001\002\000\004\005\u029b" +
    "\001\002\000\216\013\014\014\117\015\017\016\066\043" +
    "\073\044\074\045\116\046\027\047\043\050\052\051\031" +
    "\052\041\053\060\054\112\055\101\056\121\057\026\062" +
    "\056\063\024\064\067\065\063\066\070\067\035\070\046" +
    "\071\102\072\077\073\105\074\050\075\047\076\021\077" +
    "\103\100\114\101\113\102\110\103\071\104\053\105\033" +
    "\106\036\107\076\110\042\111\040\112\054\113\072\114" +
    "\062\115\032\120\051\121\045\122\037\123\057\124\107" +
    "\125\034\126\061\127\015\130\065\131\100\132\044\133" +
    "\016\134\075\135\023\136\122\137\064\140\022\141\055" +
    "\142\111\143\115\144\106\145\120\146\020\147\030\150" +
    "\025\001\002\000\004\002\013\001\002\000\004\002\001" +
    "\001\002\000\026\006\u0290\031\u0291\033\u01d9\034\u01d1\035" +
    "\u01d8\036\u01d0\037\u01d7\040\u01d2\041\u01d3\042\u01d5\001\002" +
    "\000\010\002\uff0f\030\uff0f\032\uff0f\001\002\000\010\002" +
    "\ufef4\030\ufef4\032\ufef4\001\002\000\004\033\u028a\001\002" +
    "\000\010\002\ufed4\030\ufed4\032\ufed4\001\002\000\010\002" +
    "\uff2c\030\uff2c\032\uff2c\001\002\000\012\006\u027c\026\123" +
    "\027\125\036\131\001\002\000\010\002\ufef2\030\ufef2\032" +
    "\ufef2\001\002\000\030\002\uff38\030\uff38\032\uff38\033\u01d9" +
    "\034\u01d1\035\u01d8\036\u01d0\037\u01d7\040\u01d2\041\u01d3\042" +
    "\u01d5\001\002\000\016\017\u0271\020\u0273\021\u0272\022\u0276" +
    "\023\u0270\116\u0275\001\002\000\004\060\u0262\001\002\000" +
    "\006\017\u024f\026\u024e\001\002\000\016\017\u0248\020\u024a" +
    "\021\u0249\022\u024d\023\u0247\116\u024c\001\002\000\016\004" +
    "\154\006\u023a\026\123\027\125\036\131\060\156\001\002" +
    "\000\010\002\uff1a\030\uff1a\032\uff1a\001\002\000\002\001" +
    "\002\000\004\006\u022e\001\002\000\010\002\uff33\030\uff33" +
    "\032\uff33\001\002\000\010\002\uff21\030\uff21\032\uff21\001" +
    "\002\000\010\002\uff15\030\uff15\032\uff15\001\002\000\010" +
    "\002\uff1e\030\uff1e\032\uff1e\001\002\000\016\004\154\006" +
    "\u021c\026\123\027\125\036\131\060\156\001\002\000\010" +
    "\002\uff1f\030\uff1f\032\uff1f\001\002\000\016\004\154\006" +
    "\u020d\026\123\027\125\036\131\060\156\001\002\000\010" +
    "\002\ufef5\030\ufef5\032\ufef5\001\002\000\010\002\uff16\030" +
    "\uff16\032\uff16\001\002\000\010\002\uff32\030\uff32\032\uff32" +
    "\001\002\000\010\002\uff2d\030\uff2d\032\uff2d\001\002\000" +
    "\010\002\uff2e\030\uff2e\032\uff2e\001\002\000\010\026\u01fa" +
    "\027\125\036\131\001\002\000\016\004\154\006\u01ed\026" +
    "\123\027\125\036\131\060\156\001\002\000\010\002\uff22" +
    "\030\uff22\032\uff22\001\002\000\010\002\uff1d\030\uff1d\032" +
    "\uff1d\001\002\000\012\006\u01df\026\123\027\125\036\131" +
    "\001\002\000\024\031\u01d4\033\u01d9\034\u01d1\035\u01d8\036" +
    "\u01d0\037\u01d7\040\u01d2\041\u01d3\042\u01d5\001\002\000\010" +
    "\002\uff14\030\uff14\032\uff14\001\002\000\026\006\u01bf\017" +
    "\u01c2\020\u01c4\021\u01c3\022\u01bc\023\u01be\026\123\027\125" +
    "\036\131\117\u01c1\001\002\000\010\002\uff10\030\uff10\032" +
    "\uff10\001\002\000\010\002\uff1b\030\uff1b\032\uff1b\001\002" +
    "\000\010\002\uff35\030\uff35\032\uff35\001\002\000\012\006" +
    "\u01ad\026\123\027\125\036\131\001\002\000\010\002\uff0e" +
    "\030\uff0e\032\uff0e\001\002\000\026\006\u0136\017\u0139\022" +
    "\u0132\023\u0135\024\u013a\025\u0137\026\u0134\027\125\036\131" +
    "\117\u0138\001\002\000\010\002\uff36\030\uff36\032\uff36\001" +
    "\002\000\004\061\u012f\001\002\000\010\006\u0123\023\u0120" +
    "\116\u0122\001\002\000\010\002\uff1c\030\uff1c\032\uff1c\001" +
    "\002\000\012\017\u0108\020\u0109\021\u0107\026\u0106\001\002" +
    "\000\006\017\356\026\355\001\002\000\010\002\ufef3\030" +
    "\ufef3\032\ufef3\001\002\000\010\002\uff20\030\uff20\032\uff20" +
    "\001\002\000\010\002\uff30\030\uff30\032\uff30\001\002\000" +
    "\010\002\uff0d\030\uff0d\032\uff0d\001\002\000\004\060\333" +
    "\001\002\000\010\002\uff31\030\uff31\032\uff31\001\002\000" +
    "\010\002\uff2b\030\uff2b\032\uff2b\001\002\000\010\002\uffac" +
    "\030\324\032\uffac\001\002\000\010\002\uff2f\030\uff2f\032" +
    "\uff2f\001\002\000\012\006\307\026\123\027\125\036\131" +
    "\001\002\000\010\002\uff13\030\uff13\032\uff13\001\002\000" +
    "\010\002\uff28\030\uff28\032\uff28\001\002\000\012\006\267" +
    "\026\123\027\125\036\131\001\002\000\026\006\246\017" +
    "\251\020\253\021\252\022\243\023\245\026\123\027\125" +
    "\036\131\117\250\001\002\000\010\002\uff29\030\uff29\032" +
    "\uff29\001\002\000\010\002\uff2a\030\uff2a\032\uff2a\001\002" +
    "\000\012\006\226\026\123\027\125\036\131\001\002\000" +
    "\004\026\204\001\002\000\014\031\167\033\173\034\170" +
    "\035\166\036\171\001\002\000\010\002\ufed5\030\ufed5\032" +
    "\ufed5\001\002\000\004\060\145\001\002\000\012\006\130" +
    "\026\123\027\125\036\131\001\002\000\010\002\uff8c\030" +
    "\uff8c\032\uff8c\001\002\000\010\002\uffb8\030\uffb8\032\uffb8" +
    "\001\002\000\012\002\uff8b\010\uff8b\030\uff8b\032\uff8b\001" +
    "\002\000\010\002\ufef1\030\ufef1\032\ufef1\001\002\000\010" +
    "\002\uff8d\030\uff8d\032\uff8d\001\002\000\010\017\133\020" +
    "\134\021\132\001\002\000\012\002\uff8a\010\uff8a\030\uff8a" +
    "\032\uff8a\001\002\000\004\011\141\001\002\000\004\007" +
    "\140\001\002\000\004\011\135\001\002\000\004\004\136" +
    "\001\002\000\004\007\137\001\002\000\010\002\ufeef\030" +
    "\ufeef\032\ufeef\001\002\000\010\002\ufef0\030\ufef0\032\ufef0" +
    "\001\002\000\004\004\142\001\002\000\004\007\143\001" +
    "\002\000\010\002\ufeee\030\ufeee\032\ufeee\001\002\000\010" +
    "\002\uffe4\030\uffe4\032\uffe4\001\002\000\006\006\147\010" +
    "\146\001\002\000\010\026\123\027\125\036\131\001\002" +
    "\000\010\017\150\020\152\021\151\001\002\000\004\007" +
    "\163\001\002\000\004\011\160\001\002\000\004\011\153" +
    "\001\002\000\006\004\154\060\156\001\002\000\012\002" +
    "\uffab\007\uffab\030\uffab\032\uffab\001\002\000\004\007\157" +
    "\001\002\000\012\002\uffaa\007\uffaa\030\uffaa\032\uffaa\001" +
    "\002\000\010\002\uff40\030\uff40\032\uff40\001\002\000\006" +
    "\004\154\060\156\001\002\000\004\007\162\001\002\000" +
    "\010\002\uff3f\030\uff3f\032\uff3f\001\002\000\010\002\uff41" +
    "\030\uff41\032\uff41\001\002\000\010\002\uff42\030\uff42\032" +
    "\uff42\001\002\000\010\002\uffb1\030\uffb1\032\uffb1\001\002" +
    "\000\004\010\202\001\002\000\010\002\uff7c\030\uff7c\032" +
    "\uff7c\001\002\000\004\010\200\001\002\000\004\010\176" +
    "\001\002\000\010\002\ufff1\030\ufff1\032\ufff1\001\002\000" +
    "\004\010\174\001\002\000\004\031\175\001\002\000\010" +
    "\002\uff78\030\uff78\032\uff78\001\002\000\004\031\177\001" +
    "\002\000\010\002\uff7b\030\uff7b\032\uff7b\001\002\000\004" +
    "\031\201\001\002\000\010\002\uff79\030\uff79\032\uff79\001" +
    "\002\000\004\031\203\001\002\000\010\002\uff7a\030\uff7a" +
    "\032\uff7a\001\002\000\004\010\206\001\002\000\010\002" +
    "\uffed\030\uffed\032\uffed\001\002\000\016\004\154\006\210" +
    "\026\123\027\125\036\131\060\156\001\002\000\010\002" +
    "\uff6b\030\uff6b\032\uff6b\001\002\000\010\017\212\020\214" +
    "\021\213\001\002\000\010\002\uff6c\030\uff6c\032\uff6c\001" +
    "\002\000\004\007\223\001\002\000\004\011\220\001\002" +
    "\000\004\011\215\001\002\000\006\004\154\060\156\001" +
    "\002\000\004\007\217\001\002\000\010\002\uff69\030\uff69" +
    "\032\uff69\001\002\000\006\004\154\060\156\001\002\000" +
    "\004\007\222\001\002\000\010\002\uff68\030\uff68\032\uff68" +
    "\001\002\000\010\002\uff6a\030\uff6a\032\uff6a\001\002\000" +
    "\010\002\uffb3\030\uffb3\032\uffb3\001\002\000\010\002\ufedd" +
    "\030\ufedd\032\ufedd\001\002\000\010\017\230\020\231\021" +
    "\227\001\002\000\004\011\236\001\002\000\004\007\235" +
    "\001\002\000\004\011\232\001\002\000\004\004\233\001" +
    "\002\000\004\007\234\001\002\000\010\002\ufedb\030\ufedb" +
    "\032\ufedb\001\002\000\010\002\ufedc\030\ufedc\032\ufedc\001" +
    "\002\000\004\004\237\001\002\000\004\007\240\001\002" +
    "\000\010\002\ufeda\030\ufeda\032\ufeda\001\002\000\010\002" +
    "\uffd4\030\uffd4\032\uffd4\001\002\000\010\002\uffd3\030\uffd3" +
    "\032\uffd3\001\002\000\010\002\ufefb\030\ufefb\032\ufefb\001" +
    "\002\000\010\002\uffe6\030\uffe6\032\uffe6\001\002\000\010" +
    "\002\ufefa\030\ufefa\032\ufefa\001\002\000\010\017\254\020" +
    "\256\021\255\001\002\000\010\002\uff4a\030\uff4a\032\uff4a" +
    "\001\002\000\010\002\ufef8\030\ufef8\032\ufef8\001\002\000" +
    "\010\002\ufef9\030\ufef9\032\ufef9\001\002\000\010\002\ufef6" +
    "\030\ufef6\032\ufef6\001\002\000\010\002\ufef7\030\ufef7\032" +
    "\ufef7\001\002\000\004\007\265\001\002\000\004\011\262" +
    "\001\002\000\004\011\257\001\002\000\006\004\154\060" +
    "\156\001\002\000\004\007\261\001\002\000\010\002\uff48" +
    "\030\uff48\032\uff48\001\002\000\006\004\154\060\156\001" +
    "\002\000\004\007\264\001\002\000\010\002\uff47\030\uff47" +
    "\032\uff47\001\002\000\010\002\uff49\030\uff49\032\uff49\001" +
    "\002\000\010\002\ufee1\030\ufee1\032\ufee1\001\002\000\010" +
    "\017\271\020\273\021\272\001\002\000\010\002\uffb4\030" +
    "\uffb4\032\uffb4\001\002\000\004\007\302\001\002\000\004" +
    "\011\277\001\002\000\004\011\274\001\002\000\004\004" +
    "\275\001\002\000\004\007\276\001\002\000\010\002\ufedf" +
    "\030\ufedf\032\ufedf\001\002\000\004\004\300\001\002\000" +
    "\004\007\301\001\002\000\010\002\ufede\030\ufede\032\ufede" +
    "\001\002\000\010\002\ufee0\030\ufee0\032\ufee0\001\002\000" +
    "\010\002\uffd2\030\uffd2\032\uffd2\001\002\000\010\002\uffc2" +
    "\030\uffc2\032\uffc2\001\002\000\010\002\uffb2\030\uffb2\032" +
    "\uffb2\001\002\000\010\002\ufed9\030\ufed9\032\ufed9\001\002" +
    "\000\010\017\310\020\312\021\311\001\002\000\004\007" +
    "\321\001\002\000\004\011\316\001\002\000\004\011\313" +
    "\001\002\000\004\004\314\001\002\000\004\007\315\001" +
    "\002\000\010\002\ufed7\030\ufed7\032\ufed7\001\002\000\004" +
    "\004\317\001\002\000\004\007\320\001\002\000\010\002" +
    "\ufed6\030\ufed6\032\ufed6\001\002\000\010\002\ufed8\030\ufed8" +
    "\032\ufed8\001\002\000\010\002\uffd9\030\uffd9\032\uffd9\001" +
    "\002\000\006\002\ufff9\032\ufffb\001\002\000\006\002\uffad" +
    "\032\uffad\001\002\000\004\032\326\001\002\000\222\003" +
    "\004\013\ufff4\014\ufff4\015\ufff4\016\ufff4\031\005\043\ufff4" +
    "\044\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052" +
    "\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\062\ufff4" +
    "\063\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\070\ufff4\071" +
    "\ufff4\072\ufff4\073\ufff4\074\ufff4\075\ufff4\076\ufff4\077\ufff4" +
    "\100\ufff4\101\ufff4\102\ufff4\103\ufff4\104\ufff4\105\ufff4\106" +
    "\ufff4\107\ufff4\110\ufff4\111\ufff4\112\ufff4\113\ufff4\114\ufff4" +
    "\115\ufff4\120\ufff4\121\ufff4\122\ufff4\123\ufff4\124\ufff4\125" +
    "\ufff4\126\ufff4\127\ufff4\130\ufff4\131\ufff4\132\ufff4\133\ufff4" +
    "\134\ufff4\135\ufff4\136\ufff4\137\ufff4\140\ufff4\141\ufff4\142" +
    "\ufff4\143\ufff4\144\ufff4\145\ufff4\146\ufff4\147\ufff4\150\ufff4" +
    "\001\002\000\004\002\ufffa\001\002\000\010\002\uffd5\030" +
    "\uffd5\032\uffd5\001\002\000\010\002\uffdb\030\uffdb\032\uffdb" +
    "\001\002\000\010\002\uffe5\030\uffe5\032\uffe5\001\002\000" +
    "\006\006\335\010\334\001\002\000\010\026\123\027\125" +
    "\036\131\001\002\000\010\017\337\020\340\021\336\001" +
    "\002\000\004\011\345\001\002\000\004\007\344\001\002" +
    "\000\004\011\341\001\002\000\006\004\154\060\156\001" +
    "\002\000\004\007\343\001\002\000\010\002\uff44\030\uff44" +
    "\032\uff44\001\002\000\010\002\uff45\030\uff45\032\uff45\001" +
    "\002\000\006\004\154\060\156\001\002\000\004\007\347" +
    "\001\002\000\010\002\uff43\030\uff43\032\uff43\001\002\000" +
    "\010\002\uff46\030\uff46\032\uff46\001\002\000\010\002\uffbd" +
    "\030\uffbd\032\uffbd\001\002\000\010\002\uffda\030\uffda\032" +
    "\uffda\001\002\000\010\002\uffcd\030\uffcd\032\uffcd\001\002" +
    "\000\010\002\uffba\030\uffba\032\uffba\001\002\000\004\010" +
    "\370\001\002\000\004\010\360\001\002\000\010\002\uffee" +
    "\030\uffee\032\uffee\001\002\000\016\017\362\020\364\021" +
    "\363\022\367\023\361\117\366\001\002\000\010\002\uff0b" +
    "\030\uff0b\032\uff0b\001\002\000\010\002\uff0a\030\uff0a\032" +
    "\uff0a\001\002\000\010\002\uff07\030\uff07\032\uff07\001\002" +
    "\000\010\002\uff08\030\uff08\032\uff08\001\002\000\010\002" +
    "\uff03\030\uff03\032\uff03\001\002\000\010\002\uff09\030\uff09" +
    "\032\uff09\001\002\000\010\002\uff0c\030\uff0c\032\uff0c\001" +
    "\002\000\016\004\154\006\372\026\123\027\125\036\131" +
    "\060\156\001\002\000\010\002\uff70\030\uff70\032\uff70\001" +
    "\002\000\010\017\375\020\376\021\374\001\002\000\010" +
    "\002\uff71\030\uff71\032\uff71\001\002\000\004\011\u0103\001" +
    "\002\000\004\007\u0102\001\002\000\004\011\377\001\002" +
    "\000\006\004\154\060\156\001\002\000\004\007\u0101\001" +
    "\002\000\010\002\uff6e\030\uff6e\032\uff6e\001\002\000\010" +
    "\002\uff6f\030\uff6f\032\uff6f\001\002\000\006\004\154\060" +
    "\156\001\002\000\004\007\u0105\001\002\000\010\002\uff6d" +
    "\030\uff6d\032\uff6d\001\002\000\004\010\u0111\001\002\000" +
    "\004\010\u010f\001\002\000\004\010\u010d\001\002\000\004" +
    "\010\u010b\001\002\000\010\002\uffef\030\uffef\032\uffef\001" +
    "\002\000\016\017\362\020\364\021\363\022\367\023\361" +
    "\117\366\001\002\000\010\002\uff05\030\uff05\032\uff05\001" +
    "\002\000\016\017\362\020\364\021\363\022\367\023\361" +
    "\117\366\001\002\000\010\002\uff06\030\uff06\032\uff06\001" +
    "\002\000\016\017\362\020\364\021\363\022\367\023\361" +
    "\117\366\001\002\000\010\002\uff04\030\uff04\032\uff04\001" +
    "\002\000\016\004\154\006\u0113\026\123\027\125\036\131" +
    "\060\156\001\002\000\010\002\uff75\030\uff75\032\uff75\001" +
    "\002\000\010\017\u0116\020\u0117\021\u0115\001\002\000\010" +
    "\002\uff76\030\uff76\032\uff76\001\002\000\004\011\u011c\001" +
    "\002\000\004\007\u011b\001\002\000\004\011\u0118\001\002" +
    "\000\006\004\154\060\156\001\002\000\004\007\u011a\001" +
    "\002\000\010\002\uff73\030\uff73\032\uff73\001\002\000\010" +
    "\002\uff74\030\uff74\032\uff74\001\002\000\006\004\154\060" +
    "\156\001\002\000\004\007\u011e\001\002\000\010\002\uff72" +
    "\030\uff72\032\uff72\001\002\000\010\002\uffc9\030\uffc9\032" +
    "\uffc9\001\002\000\004\010\u012c\001\002\000\010\002\uffd1" +
    "\030\uffd1\032\uffd1\001\002\000\004\010\u012a\001\002\000" +
    "\004\117\u0124\001\002\000\004\007\u0125\001\002\000\004" +
    "\010\u0126\001\002\000\010\017\u0128\020\u0129\021\u0127\001" +
    "\002\000\010\002\uff23\030\uff23\032\uff23\001\002\000\010" +
    "\002\uff25\030\uff25\032\uff25\001\002\000\010\002\uff24\030" +
    "\uff24\032\uff24\001\002\000\004\116\u012b\001\002\000\010" +
    "\002\uff26\030\uff26\032\uff26\001\002\000\004\017\u012d\001" +
    "\002\000\010\002\uff27\030\uff27\032\uff27\001\002\000\010" +
    "\002\uffde\030\uffde\032\uffde\001\002\000\010\002\uff34\030" +
    "\uff34\032\uff34\001\002\000\010\002\uffe0\030\uffe0\032\uffe0" +
    "\001\002\000\010\002\ufff3\030\ufff3\032\ufff3\001\002\000" +
    "\004\010\u01a6\001\002\000\004\010\u0198\001\002\000\004" +
    "\010\u0182\001\002\000\004\010\u017d\001\002\000\020\005" +
    "\u013e\017\u014f\020\u0151\021\u0150\022\u0152\023\u014e\061\u0140" +
    "\001\002\000\004\010\u014c\001\002\000\004\010\u0144\001" +
    "\002\000\004\010\u013d\001\002\000\004\010\u013b\001\002" +
    "\000\004\026\u013c\001\002\000\010\002\uff8f\030\uff8f\032" +
    "\uff8f\001\002\000\010\005\u013e\006\u013f\061\u0140\001\002" +
    "\000\012\002\uffa9\007\uffa9\030\uffa9\032\uffa9\001\002\000" +
    "\006\005\u013e\061\u0140\001\002\000\012\002\uffa8\007\uffa8" +
    "\030\uffa8\032\uffa8\001\002\000\010\002\ufed1\030\ufed1\032" +
    "\ufed1\001\002\000\004\007\u0143\001\002\000\010\002\ufecb" +
    "\030\ufecb\032\ufecb\001\002\000\016\005\u013e\006\u0148\017" +
    "\u0146\020\u0147\021\u0145\061\u0140\001\002\000\010\002\ufebf" +
    "\030\ufebf\032\ufebf\001\002\000\010\002\ufec1\030\ufec1\032" +
    "\ufec1\001\002\000\010\002\ufec0\030\ufec0\032\ufec0\001\002" +
    "\000\006\005\u013e\061\u0140\001\002\000\010\002\ufed0\030" +
    "\ufed0\032\ufed0\001\002\000\004\007\u014b\001\002\000\010" +
    "\002\ufeca\030\ufeca\032\ufeca\001\002\000\004\026\u014d\001" +
    "\002\000\010\002\uff8e\030\uff8e\032\uff8e\001\002\000\004" +
    "\007\u017a\001\002\000\004\007\u0176\001\002\000\006\010" +
    "\u016b\011\u016c\001\002\000\006\010\u0160\011\u0161\001\002" +
    "\000\004\007\u015d\001\002\000\004\007\u0154\001\002\000" +
    "\014\010\u0156\017\u0157\022\u0159\023\u0155\117\u0158\001\002" +
    "\000\010\002\ufec6\030\ufec6\032\ufec6\001\002\000\010\020" +
    "\u015c\021\u015b\026\u015a\001\002\000\010\002\ufec5\030\ufec5" +
    "\032\ufec5\001\002\000\010\002\ufec4\030\ufec4\032\ufec4\001" +
    "\002\000\010\002\ufec7\030\ufec7\032\ufec7\001\002\000\010" +
    "\002\uff92\030\uff92\032\uff92\001\002\000\010\002\ufec2\030" +
    "\ufec2\032\ufec2\001\002\000\010\002\ufec3\030\ufec3\032\ufec3" +
    "\001\002\000\004\010\u015e\001\002\000\004\026\u015f\001" +
    "\002\000\010\002\uff94\030\uff94\032\uff94\001\002\000\010" +
    "\005\u013e\006\u0167\061\u0140\001\002\000\006\004\154\060" +
    "\156\001\002\000\004\007\u0163\001\002\000\004\010\u0164" +
    "\001\002\000\014\004\154\026\123\027\125\036\131\060" +
    "\156\001\002\000\010\002\uff9c\030\uff9c\032\uff9c\001\002" +
    "\000\010\002\uff99\030\uff99\032\uff99\001\002\000\006\005" +
    "\u013e\061\u0140\001\002\000\010\002\ufecf\030\ufecf\032\ufecf" +
    "\001\002\000\004\007\u016a\001\002\000\010\002\ufec9\030" +
    "\ufec9\032\ufec9\001\002\000\010\005\u013e\006\u0172\061\u0140" +
    "\001\002\000\006\004\154\060\156\001\002\000\004\007" +
    "\u016e\001\002\000\004\010\u016f\001\002\000\014\004\154" +
    "\026\123\027\125\036\131\060\156\001\002\000\010\002" +
    "\uff9b\030\uff9b\032\uff9b\001\002\000\010\002\uff98\030\uff98" +
    "\032\uff98\001\002\000\006\005\u013e\061\u0140\001\002\000" +
    "\010\002\ufece\030\ufece\032\ufece\001\002\000\004\007\u0175" +
    "\001\002\000\010\002\ufec8\030\ufec8\032\ufec8\001\002\000" +
    "\004\010\u0177\001\002\000\014\004\154\026\123\027\125" +
    "\036\131\060\156\001\002\000\010\002\uff9d\030\uff9d\032" +
    "\uff9d\001\002\000\010\002\uff9a\030\uff9a\032\uff9a\001\002" +
    "\000\004\010\u017b\001\002\000\004\026\u017c\001\002\000" +
    "\010\002\uff93\030\uff93\032\uff93\001\002\000\010\005\u013e" +
    "\006\u017e\061\u0140\001\002\000\006\005\u013e\061\u0140\001" +
    "\002\000\010\002\ufed2\030\ufed2\032\ufed2\001\002\000\004" +
    "\007\u0181\001\002\000\010\002\ufecc\030\ufecc\032\ufecc\001" +
    "\002\000\022\004\154\006\u0184\024\u0187\025\u0185\026\123" +
    "\027\125\036\131\060\156\001\002\000\010\002\uffa4\030" +
    "\uffa4\032\uffa4\001\002\000\020\005\u013e\017\u018a\020\u018b" +
    "\021\u0189\022\u018c\023\u0188\061\u0140\001\002\000\010\002" +
    "\uff90\030\uff90\032\uff90\001\002\000\010\002\uffa6\030\uffa6" +
    "\032\uffa6\001\002\000\010\002\uff91\030\uff91\032\uff91\001" +
    "\002\000\004\007\u0197\001\002\000\004\011\u0194\001\002" +
    "\000\004\007\u0193\001\002\000\004\011\u0190\001\002\000" +
    "\004\007\u018f\001\002\000\004\007\u018e\001\002\000\010" +
    "\002\uff95\030\uff95\032\uff95\001\002\000\010\002\uff97\030" +
    "\uff97\032\uff97\001\002\000\006\004\154\060\156\001\002" +
    "\000\004\007\u0192\001\002\000\010\002\uffa0\030\uffa0\032" +
    "\uffa0\001\002\000\010\002\uffa2\030\uffa2\032\uffa2\001\002" +
    "\000\006\004\154\060\156\001\002\000\004\007\u0196\001" +
    "\002\000\010\002\uff9e\030\uff9e\032\uff9e\001\002\000\010" +
    "\002\uff96\030\uff96\032\uff96\001\002\000\016\004\154\006" +
    "\u019a\026\123\027\125\036\131\060\156\001\002\000\010" +
    "\002\uffa5\030\uffa5\032\uffa5\001\002\000\010\017\u019c\020" +
    "\u019e\021\u019d\001\002\000\010\002\uffa7\030\uffa7\032\uffa7" +
    "\001\002\000\004\007\u01a5\001\002\000\004\011\u01a2\001" +
    "\002\000\004\011\u019f\001\002\000\006\004\154\060\156" +
    "\001\002\000\004\007\u01a1\001\002\000\010\002\uffa1\030" +
    "\uffa1\032\uffa1\001\002\000\006\004\154\060\156\001\002" +
    "\000\004\007\u01a4\001\002\000\010\002\uff9f\030\uff9f\032" +
    "\uff9f\001\002\000\010\002\uffa3\030\uffa3\032\uffa3\001\002" +
    "\000\010\005\u013e\006\u01a7\061\u0140\001\002\000\006\005" +
    "\u013e\061\u0140\001\002\000\010\002\ufed3\030\ufed3\032\ufed3" +
    "\001\002\000\004\007\u01aa\001\002\000\010\002\ufecd\030" +
    "\ufecd\032\ufecd\001\002\000\010\002\uffbe\030\uffbe\032\uffbe" +
    "\001\002\000\010\002\ufeed\030\ufeed\032\ufeed\001\002\000" +
    "\010\017\u01b0\020\u01b1\021\u01af\001\002\000\010\002\uffb7" +
    "\030\uffb7\032\uffb7\001\002\000\004\011\u01b6\001\002\000" +
    "\004\007\u01b5\001\002\000\004\011\u01b2\001\002\000\004" +
    "\004\u01b3\001\002\000\004\007\u01b4\001\002\000\010\002" +
    "\ufeeb\030\ufeeb\032\ufeeb\001\002\000\010\002\ufeec\030\ufeec" +
    "\032\ufeec\001\002\000\004\004\u01b7\001\002\000\004\007" +
    "\u01b8\001\002\000\010\002\ufeea\030\ufeea\032\ufeea\001\002" +
    "\000\010\002\uffdf\030\uffdf\032\uffdf\001\002\000\010\002" +
    "\uffc8\030\uffc8\032\uffc8\001\002\000\010\002\uffc0\030\uffc0" +
    "\032\uffc0\001\002\000\010\002\uff01\030\uff01\032\uff01\001" +
    "\002\000\010\002\uffe7\030\uffe7\032\uffe7\001\002\000\010" +
    "\002\uff00\030\uff00\032\uff00\001\002\000\010\017\u01c6\020" +
    "\u01c7\021\u01c5\001\002\000\010\002\uff4e\030\uff4e\032\uff4e" +
    "\001\002\000\010\002\ufefe\030\ufefe\032\ufefe\001\002\000" +
    "\010\002\ufeff\030\ufeff\032\ufeff\001\002\000\010\002\ufefc" +
    "\030\ufefc\032\ufefc\001\002\000\010\002\ufefd\030\ufefd\032" +
    "\ufefd\001\002\000\004\011\u01cc\001\002\000\004\007\u01cb" +
    "\001\002\000\004\011\u01c8\001\002\000\006\004\154\060" +
    "\156\001\002\000\004\007\u01ca\001\002\000\010\002\uff4c" +
    "\030\uff4c\032\uff4c\001\002\000\010\002\uff4d\030\uff4d\032" +
    "\uff4d\001\002\000\006\004\154\060\156\001\002\000\004" +
    "\007\u01ce\001\002\000\010\002\uff4b\030\uff4b\032\uff4b\001" +
    "\002\000\010\002\uffc3\030\uffc3\032\uffc3\001\002\000\012" +
    "\002\uff81\010\uff81\030\uff81\032\uff81\001\002\000\012\002" +
    "\uff83\010\uff83\030\uff83\032\uff83\001\002\000\012\002\uff7f" +
    "\010\uff7f\030\uff7f\032\uff7f\001\002\000\012\002\uff7e\010" +
    "\uff7e\030\uff7e\032\uff7e\001\002\000\010\002\uff3a\030\uff3a" +
    "\032\uff3a\001\002\000\012\002\uff7d\010\uff7d\030\uff7d\032" +
    "\uff7d\001\002\000\004\010\u01db\001\002\000\012\002\uff80" +
    "\010\uff80\030\uff80\032\uff80\001\002\000\012\002\uff82\010" +
    "\uff82\030\uff82\032\uff82\001\002\000\012\002\uff84\010\uff84" +
    "\030\uff84\032\uff84\001\002\000\010\002\uffe2\030\uffe2\032" +
    "\uffe2\001\002\000\004\031\u01dc\001\002\000\010\002\uff39" +
    "\030\uff39\032\uff39\001\002\000\010\002\uffb5\030\uffb5\032" +
    "\uffb5\001\002\000\010\002\ufee5\030\ufee5\032\ufee5\001\002" +
    "\000\010\017\u01e1\020\u01e2\021\u01e0\001\002\000\004\011" +
    "\u01e7\001\002\000\004\007\u01e6\001\002\000\004\011\u01e3" +
    "\001\002\000\004\004\u01e4\001\002\000\004\007\u01e5\001" +
    "\002\000\010\002\ufee3\030\ufee3\032\ufee3\001\002\000\010" +
    "\002\ufee4\030\ufee4\032\ufee4\001\002\000\004\004\u01e8\001" +
    "\002\000\004\007\u01e9\001\002\000\010\002\ufee2\030\ufee2" +
    "\032\ufee2\001\002\000\010\002\uffca\030\uffca\032\uffca\001" +
    "\002\000\010\002\uffd0\030\uffd0\032\uffd0\001\002\000\010" +
    "\002\uff5c\030\uff5c\032\uff5c\001\002\000\010\017\u01f1\020" +
    "\u01f2\021\u01f0\001\002\000\010\002\uffea\030\uffea\032\uffea" +
    "\001\002\000\010\002\uff5d\030\uff5d\032\uff5d\001\002\000" +
    "\004\011\u01f7\001\002\000\004\007\u01f6\001\002\000\004" +
    "\011\u01f3\001\002\000\006\004\154\060\156\001\002\000" +
    "\004\007\u01f5\001\002\000\010\002\uff5a\030\uff5a\032\uff5a" +
    "\001\002\000\010\002\uff5b\030\uff5b\032\uff5b\001\002\000" +
    "\006\004\154\060\156\001\002\000\004\007\u01f9\001\002" +
    "\000\010\002\uff59\030\uff59\032\uff59\001\002\000\004\010" +
    "\u0201\001\002\000\010\002\uffc6\030\uffc6\032\uffc6\001\002" +
    "\000\004\010\u01fd\001\002\000\004\006\u01fe\001\002\000" +
    "\004\036\u01ff\001\002\000\004\007\u0200\001\002\000\010" +
    "\002\uff18\030\uff18\032\uff18\001\002\000\004\006\u0202\001" +
    "\002\000\010\004\154\036\u0203\060\156\001\002\000\004" +
    "\007\u0206\001\002\000\004\007\u0205\001\002\000\010\002" +
    "\uff19\030\uff19\032\uff19\001\002\000\010\002\uff17\030\uff17" +
    "\032\uff17\001\002\000\010\002\uffd8\030\uffd8\032\uffd8\001" +
    "\002\000\010\002\uffd7\030\uffd7\032\uffd7\001\002\000\010" +
    "\002\uffdc\030\uffdc\032\uffdc\001\002\000\010\002\uffc5\030" +
    "\uffc5\032\uffc5\001\002\000\010\002\uffbc\030\uffbc\032\uffbc" +
    "\001\002\000\010\002\uff61\030\uff61\032\uff61\001\002\000" +
    "\010\017\u0211\020\u0212\021\u0210\001\002\000\010\002\uffeb" +
    "\030\uffeb\032\uffeb\001\002\000\010\002\uff62\030\uff62\032" +
    "\uff62\001\002\000\004\011\u0217\001\002\000\004\007\u0216" +
    "\001\002\000\004\011\u0213\001\002\000\006\004\154\060" +
    "\156\001\002\000\004\007\u0215\001\002\000\010\002\uff5f" +
    "\030\uff5f\032\uff5f\001\002\000\010\002\uff60\030\uff60\032" +
    "\uff60\001\002\000\006\004\154\060\156\001\002\000\004" +
    "\007\u0219\001\002\000\010\002\uff5e\030\uff5e\032\uff5e\001" +
    "\002\000\010\002\uffcc\030\uffcc\032\uffcc\001\002\000\010" +
    "\002\uff52\030\uff52\032\uff52\001\002\000\010\017\u021f\020" +
    "\u0221\021\u0220\001\002\000\010\002\uff53\030\uff53\032\uff53" +
    "\001\002\000\010\002\uffe8\030\uffe8\032\uffe8\001\002\000" +
    "\004\007\u0228\001\002\000\004\011\u0225\001\002\000\004" +
    "\011\u0222\001\002\000\006\004\154\060\156\001\002\000" +
    "\004\007\u0224\001\002\000\010\002\uff50\030\uff50\032\uff50" +
    "\001\002\000\006\004\154\060\156\001\002\000\004\007" +
    "\u0227\001\002\000\010\002\uff4f\030\uff4f\032\uff4f\001\002" +
    "\000\010\002\uff51\030\uff51\032\uff51\001\002\000\010\002" +
    "\uffcb\030\uffcb\032\uffcb\001\002\000\010\002\uffc4\030\uffc4" +
    "\032\uffc4\001\002\000\010\002\uffce\030\uffce\032\uffce\001" +
    "\002\000\010\002\uffdd\030\uffdd\032\uffdd\001\002\000\010" +
    "\002\uffc1\030\uffc1\032\uffc1\001\002\000\010\004\154\036" +
    "\u022f\060\156\001\002\000\004\007\u0234\001\002\000\004" +
    "\007\u0231\001\002\000\004\010\u0232\001\002\000\004\026" +
    "\u0233\001\002\000\010\002\uff12\030\uff12\032\uff12\001\002" +
    "\000\004\010\u0235\001\002\000\010\026\123\027\125\036" +
    "\131\001\002\000\010\002\uff11\030\uff11\032\uff11\001\002" +
    "\000\010\002\uffcf\030\uffcf\032\uffcf\001\002\000\010\002" +
    "\uffc7\030\uffc7\032\uffc7\001\002\000\010\002\uff57\030\uff57" +
    "\032\uff57\001\002\000\010\017\u023e\020\u023f\021\u023d\001" +
    "\002\000\010\002\uffe9\030\uffe9\032\uffe9\001\002\000\010" +
    "\002\uff58\030\uff58\032\uff58\001\002\000\004\011\u0244\001" +
    "\002\000\004\007\u0243\001\002\000\004\011\u0240\001\002" +
    "\000\006\004\154\060\156\001\002\000\004\007\u0242\001" +
    "\002\000\010\002\uff55\030\uff55\032\uff55\001\002\000\010" +
    "\002\uff56\030\uff56\032\uff56\001\002\000\006\004\154\060" +
    "\156\001\002\000\004\007\u0246\001\002\000\010\002\uff54" +
    "\030\uff54\032\uff54\001\002\000\010\002\ufebd\030\ufebd\032" +
    "\ufebd\001\002\000\010\002\ufebc\030\ufebc\032\ufebc\001\002" +
    "\000\010\002\ufeb9\030\ufeb9\032\ufeb9\001\002\000\010\002" +
    "\ufeba\030\ufeba\032\ufeba\001\002\000\010\002\uffaf\030\uffaf" +
    "\032\uffaf\001\002\000\010\002\ufebb\030\ufebb\032\ufebb\001" +
    "\002\000\010\002\ufebe\030\ufebe\032\ufebe\001\002\000\004" +
    "\010\u0253\001\002\000\004\010\u0251\001\002\000\010\002" +
    "\uffec\030\uffec\032\uffec\001\002\000\016\017\362\020\364" +
    "\021\363\022\367\023\361\117\366\001\002\000\010\002" +
    "\uff02\030\uff02\032\uff02\001\002\000\016\004\154\006\u0255" +
    "\026\123\027\125\036\131\060\156\001\002\000\010\002" +
    "\uff66\030\uff66\032\uff66\001\002\000\010\017\u0257\020\u0259" +
    "\021\u0258\001\002\000\010\002\uff67\030\uff67\032\uff67\001" +
    "\002\000\004\007\u0260\001\002\000\004\011\u025d\001\002" +
    "\000\004\011\u025a\001\002\000\006\004\154\060\156\001" +
    "\002\000\004\007\u025c\001\002\000\010\002\uff64\030\uff64" +
    "\032\uff64\001\002\000\006\004\154\060\156\001\002\000" +
    "\004\007\u025f\001\002\000\010\002\uff63\030\uff63\032\uff63" +
    "\001\002\000\010\002\uff65\030\uff65\032\uff65\001\002\000" +
    "\010\002\uffe3\030\uffe3\032\uffe3\001\002\000\006\006\u0264" +
    "\010\u0263\001\002\000\010\026\123\027\125\036\131\001" +
    "\002\000\010\017\u0266\020\u0267\021\u0265\001\002\000\004" +
    "\011\u026c\001\002\000\004\007\u026b\001\002\000\004\011" +
    "\u0268\001\002\000\006\004\154\060\156\001\002\000\004" +
    "\007\u026a\001\002\000\010\002\uff3c\030\uff3c\032\uff3c\001" +
    "\002\000\010\002\uff3d\030\uff3d\032\uff3d\001\002\000\006" +
    "\004\154\060\156\001\002\000\004\007\u026e\001\002\000" +
    "\010\002\uff3b\030\uff3b\032\uff3b\001\002\000\010\002\uff3e" +
    "\030\uff3e\032\uff3e\001\002\000\010\002\ufeb7\030\ufeb7\032" +
    "\ufeb7\001\002\000\010\002\ufeb6\030\ufeb6\032\ufeb6\001\002" +
    "\000\010\002\ufeb3\030\ufeb3\032\ufeb3\001\002\000\010\002" +
    "\ufeb4\030\ufeb4\032\ufeb4\001\002\000\010\002\uffae\030\uffae" +
    "\032\uffae\001\002\000\010\002\ufeb5\030\ufeb5\032\ufeb5\001" +
    "\002\000\010\002\ufeb8\030\ufeb8\032\ufeb8\001\002\000\010" +
    "\002\uffe1\030\uffe1\032\uffe1\001\002\000\010\002\uff37\030" +
    "\uff37\032\uff37\001\002\000\010\002\uffb9\030\uffb9\032\uffb9" +
    "\001\002\000\010\002\uffb6\030\uffb6\032\uffb6\001\002\000" +
    "\010\002\ufee9\030\ufee9\032\ufee9\001\002\000\010\017\u027e" +
    "\020\u027f\021\u027d\001\002\000\004\011\u0284\001\002\000" +
    "\004\007\u0283\001\002\000\004\011\u0280\001\002\000\004" +
    "\004\u0281\001\002\000\004\007\u0282\001\002\000\010\002" +
    "\ufee7\030\ufee7\032\ufee7\001\002\000\010\002\ufee8\030\ufee8" +
    "\032\ufee8\001\002\000\004\004\u0285\001\002\000\004\007" +
    "\u0286\001\002\000\010\002\ufee6\030\ufee6\032\ufee6\001\002" +
    "\000\010\002\uffd6\030\uffd6\032\uffd6\001\002\000\010\002" +
    "\uffb0\030\uffb0\032\uffb0\001\002\000\010\002\ufff0\030\ufff0" +
    "\032\ufff0\001\002\000\004\010\u028b\001\002\000\004\031" +
    "\u028c\001\002\000\010\002\uff77\030\uff77\032\uff77\001\002" +
    "\000\010\002\uffbb\030\uffbb\032\uffbb\001\002\000\010\002" +
    "\uffbf\030\uffbf\032\uffbf\001\002\000\010\002\ufff2\030\ufff2" +
    "\032\ufff2\001\002\000\010\017\u0296\020\u0297\021\u0295\001" +
    "\002\000\010\002\uff89\030\uff89\032\uff89\001\002\000\004" +
    "\010\u0293\001\002\000\004\031\u0294\001\002\000\010\002" +
    "\uff88\030\uff88\032\uff88\001\002\000\004\007\u029a\001\002" +
    "\000\004\007\u0299\001\002\000\004\007\u0298\001\002\000" +
    "\010\002\uff86\030\uff86\032\uff86\001\002\000\010\002\uff87" +
    "\030\uff87\032\uff87\001\002\000\010\002\uff85\030\uff85\032" +
    "\uff85\001\002\000\004\032\uffff\001\002\000\004\032\u029d" +
    "\001\002\000\222\003\ufffe\013\ufffe\014\ufffe\015\ufffe\016" +
    "\ufffe\031\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe" +
    "\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\056" +
    "\ufffe\057\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe" +
    "\067\ufffe\070\ufffe\071\ufffe\072\ufffe\073\ufffe\074\ufffe\075" +
    "\ufffe\076\ufffe\077\ufffe\100\ufffe\101\ufffe\102\ufffe\103\ufffe" +
    "\104\ufffe\105\ufffe\106\ufffe\107\ufffe\110\ufffe\111\ufffe\112" +
    "\ufffe\113\ufffe\114\ufffe\115\ufffe\120\ufffe\121\ufffe\122\ufffe" +
    "\123\ufffe\124\ufffe\125\ufffe\126\ufffe\127\ufffe\130\ufffe\131" +
    "\ufffe\132\ufffe\133\ufffe\134\ufffe\135\ufffe\136\ufffe\137\ufffe" +
    "\140\ufffe\141\ufffe\142\ufffe\143\ufffe\144\ufffe\145\ufffe\146" +
    "\ufffe\147\ufffe\150\ufffe\001\002\000\222\003\004\013\ufff4" +
    "\014\ufff4\015\ufff4\016\ufff4\031\005\043\ufff4\044\ufff4\045" +
    "\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4" +
    "\054\ufff4\055\ufff4\056\ufff4\057\ufff4\062\ufff4\063\ufff4\064" +
    "\ufff4\065\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\072\ufff4" +
    "\073\ufff4\074\ufff4\075\ufff4\076\ufff4\077\ufff4\100\ufff4\101" +
    "\ufff4\102\ufff4\103\ufff4\104\ufff4\105\ufff4\106\ufff4\107\ufff4" +
    "\110\ufff4\111\ufff4\112\ufff4\113\ufff4\114\ufff4\115\ufff4\120" +
    "\ufff4\121\ufff4\122\ufff4\123\ufff4\124\ufff4\125\ufff4\126\ufff4" +
    "\127\ufff4\130\ufff4\131\ufff4\132\ufff4\133\ufff4\134\ufff4\135" +
    "\ufff4\136\ufff4\137\ufff4\140\ufff4\141\ufff4\142\ufff4\143\ufff4" +
    "\144\ufff4\145\ufff4\146\ufff4\147\ufff4\150\ufff4\001\002\000" +
    "\004\002\ufffd\001\002\000\216\013\ufff5\014\ufff5\015\ufff5" +
    "\016\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050" +
    "\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5" +
    "\057\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\067" +
    "\ufff5\070\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5" +
    "\076\ufff5\077\ufff5\100\ufff5\101\ufff5\102\ufff5\103\ufff5\104" +
    "\ufff5\105\ufff5\106\ufff5\107\ufff5\110\ufff5\111\ufff5\112\ufff5" +
    "\113\ufff5\114\ufff5\115\ufff5\120\ufff5\121\ufff5\122\ufff5\123" +
    "\ufff5\124\ufff5\125\ufff5\126\ufff5\127\ufff5\130\ufff5\131\ufff5" +
    "\132\ufff5\133\ufff5\134\ufff5\135\ufff5\136\ufff5\137\ufff5\140" +
    "\ufff5\141\ufff5\142\ufff5\143\ufff5\144\ufff5\145\ufff5\146\ufff5" +
    "\147\ufff5\150\ufff5\001\002\000\004\032\u02a2\001\002\000" +
    "\222\003\004\013\ufff4\014\ufff4\015\ufff4\016\ufff4\031\005" +
    "\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\051" +
    "\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4" +
    "\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\070" +
    "\ufff4\071\ufff4\072\ufff4\073\ufff4\074\ufff4\075\ufff4\076\ufff4" +
    "\077\ufff4\100\ufff4\101\ufff4\102\ufff4\103\ufff4\104\ufff4\105" +
    "\ufff4\106\ufff4\107\ufff4\110\ufff4\111\ufff4\112\ufff4\113\ufff4" +
    "\114\ufff4\115\ufff4\120\ufff4\121\ufff4\122\ufff4\123\ufff4\124" +
    "\ufff4\125\ufff4\126\ufff4\127\ufff4\130\ufff4\131\ufff4\132\ufff4" +
    "\133\ufff4\134\ufff4\135\ufff4\136\ufff4\137\ufff4\140\ufff4\141" +
    "\ufff4\142\ufff4\143\ufff4\144\ufff4\145\ufff4\146\ufff4\147\ufff4" +
    "\150\ufff4\001\002\000\004\002\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02a1\000\012\002\011\003\006\006\010\117\005\001" +
    "\001\000\004\127\u02a0\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\u028e\120\u0291\001\001\000\004\075\u028d\001\001\000" +
    "\004\101\u028c\001\001\000\004\013\u0288\001\001\000\004" +
    "\114\u0287\001\001\000\004\046\u0286\001\001\000\010\010" +
    "\u027a\014\126\106\u0279\001\001\000\004\103\u0278\001\001" +
    "\000\006\033\u0276\120\u0277\001\001\000\004\116\u0273\001" +
    "\001\000\004\031\u0260\001\001\000\004\020\u024f\001\001" +
    "\000\004\115\u024a\001\001\000\012\010\u023b\014\126\023" +
    "\u023a\121\u0238\001\001\000\004\065\u0237\001\001\000\004" +
    "\055\u0236\001\001\000\004\073\u022c\001\001\000\004\037" +
    "\u022b\001\001\000\004\056\u022a\001\001\000\004\070\u0229" +
    "\001\001\000\004\061\u0228\001\001\000\012\010\u021c\014" +
    "\126\024\u021d\121\u021a\001\001\000\004\060\u0219\001\001" +
    "\000\012\010\u020e\014\126\021\u020d\121\u020b\001\001\000" +
    "\004\100\u020a\001\001\000\004\067\u0209\001\001\000\004" +
    "\040\u0208\001\001\000\004\045\u0207\001\001\000\004\044" +
    "\u0206\001\001\000\006\014\u01fb\066\u01fa\001\001\000\012" +
    "\010\u01ee\014\126\022\u01ed\121\u01eb\001\001\000\004\054" +
    "\u01ea\001\001\000\004\062\u01e9\001\001\000\010\010\u01dd" +
    "\014\126\107\u01dc\001\001\000\006\032\u01d9\120\u01d5\001" +
    "\001\000\004\071\u01ce\001\001\000\010\010\u01bf\014\126" +
    "\025\u01bc\001\001\000\004\074\u01ba\001\001\000\004\064" +
    "\u01b9\001\001\000\004\035\u01b8\001\001\000\010\010\u01ab" +
    "\014\126\105\u01ad\001\001\000\004\076\u01aa\001\001\000" +
    "\006\007\u0130\014\u0132\001\001\000\004\034\u012f\001\001" +
    "\000\004\036\u012d\001\001\000\004\053\u0120\001\001\000" +
    "\004\063\u011e\001\001\000\004\015\u0109\001\001\000\004" +
    "\016\356\001\001\000\004\102\353\001\001\000\004\057" +
    "\352\001\001\000\004\042\351\001\001\000\004\077\350" +
    "\001\001\000\004\027\331\001\001\000\004\041\330\001" +
    "\001\000\004\047\327\001\001\000\004\004\322\001\001" +
    "\000\004\043\321\001\001\000\010\010\305\014\126\112" +
    "\304\001\001\000\004\072\303\001\001\000\004\052\302" +
    "\001\001\000\010\010\265\014\126\110\267\001\001\000" +
    "\010\010\246\014\126\026\243\001\001\000\004\051\241" +
    "\001\001\000\004\050\240\001\001\000\010\010\224\014" +
    "\126\111\223\001\001\000\004\017\204\001\001\000\004" +
    "\012\171\001\001\000\004\113\164\001\001\000\004\030" +
    "\143\001\001\000\010\010\125\014\126\104\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\163\014\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\210\014\126\121\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\257" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\126\324\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\326\006\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\347\014\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\341\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\345\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\123\364\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\372" +
    "\014\126\121\370\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\377\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u0103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\123\u010b\001\001\000\002\001" +
    "\001\000\004\123\u010d\001\001\000\002\001\001\000\004" +
    "\123\u010f\001\001\000\002\001\001\000\010\010\u0113\014" +
    "\126\121\u0111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u0118\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u011c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\122" +
    "\u0152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\122\u0140\001\001\000\002\001\001\000\004" +
    "\122\u0141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\122\u0148\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\122\u0149\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\122\u0167\001\001\000" +
    "\004\121\u0161\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\u0164\014\126\121\u0165\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\122\u0168\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\122" +
    "\u0172\001\001\000\004\121\u016c\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\u016f\014\126\121\u0170\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\122\u0173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\u0177\014\126\121\u0178" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\122\u017e" +
    "\001\001\000\004\122\u017f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\u0185\014\126" +
    "\121\u0182\001\001\000\002\001\001\000\004\122\u018c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u0190\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u0194\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\u019a\014\126\121\u0198\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u019f\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u01a2\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\122\u01a7\001\001\000\004\122" +
    "\u01a8\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u01c8\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u01cc\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u01f3\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u01f7\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u0203\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u0213\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u0217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u0222\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u0225\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u022f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\u0235\014\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u0240\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u0244\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\123\u0251\001\001\000\002" +
    "\001\001\000\010\010\u0255\014\126\121\u0253\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u025a\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u025d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\u026e\014\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\u0268" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u026c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\124\u029b" +
    "\001\001\000\002\001\001\000\004\125\u029d\001\001\000" +
    "\010\003\006\006\010\117\u029e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\u02a2\006" +
    "\010\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    static String linea = new String();
    static String hex;
    static String lst;
    
    public void cargar(String archivo, String hex, String lst) throws Exception{
        this.lst = lst;
        this.hex = hex;
        new parser(new Yylex(new FileReader(archivo))).parse();
    }
    
    public void syntax_error(Symbol s) {
        System.err.println("Sintax error '" + s.value + "' line: "+ (s.left + 1) + ", column: " + (s.right + 1));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.err.println("Sintax error '" + s.value + "' line: "+ (s.left + 1) + ", column: " + (s.right + 1));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    boolean error = false;
    Map<String, Etiquetas> table = new Hashtable<>();
    LinkedList<Codigo> codigo = new LinkedList<Codigo>();
    String check = "";
    Codigo act;
    int dirC = 0;
    int CL = 0;

    public Codigo insertCode(String cod){
        Codigo codOb = new Codigo(String.format("%04X", CL), cod);
        codigo.addLast(codOb);
        act = codOb;
        return codOb;
    }
    
    public Codigo insertCode(String cod, String jump){
        Codigo codOb = new Codigo(String.format("%04X", CL), cod, jump);
        codigo.addLast(codOb);
        act = codOb;
        return codOb;
    }
    
    public void resolver(String e){
        ArrayList<Codigo> tmp = table.get(e).llamadas;
        int dir = table.get(e).direccion;
        for (Codigo cod : tmp){
            String str;
            if(cod.tipo == "JR")
                str = String.format("%02X", dir - (Integer.parseInt(cod.dir, 16) + 2));
            else {
                str = String.format("%04X", dir);
                str = getNum16Bits(str);
            }
            if(str.length() == 8)
                str = str.substring(6);
            cod.codigo += str;
        }
        table.get(e).llamadas.clear();
    }

    public void validarEti(String e, String code, String jump){
        String dir;
        if(table.containsKey(e)){
            if(table.get(e).definicion){
                if(jump.equals("JR")){
                    dir = String.format("%02X", table.get(e).direccion - (CL+2));
                    if(dir.length() == 8)
                        dir = dir.substring(6);
                }
                else{
                    dir = String.format("%04X", table.get(e).direccion);
                    dir = getNum16Bits(dir);
                }
                insertCode(code + dir);
            }
            else{
                table.get(e).llamadas.add(insertCode(code, jump));
            }
        }
        else{
            table.put(e, new Etiquetas(false));
            table.get(e).llamadas.add(insertCode(code, jump));
        }
    }

    public String getRegistro(String reg){
        switch(reg.toUpperCase()){
            case "B":
                return "000";
            case "C":
                return "001";
            case "D":
                return "010";
            case "E":
                return "011";
            case "H":
                return "100";
            case "L":
                return "101";
            case "A":
                return "111";
        }
        return null;
    }

    public String getRegistro2Bits(String reg){
        switch(reg.toUpperCase()){
            case "BC":
                return "00";
            case "DE":
                return "01";
            case "HL":
                return "10";
            case "SP":
                return "11";
            case "IX":
                return "10";
            case "IY":
                return "10";
        }
        return null;
    }

    public String getCondition(String reg){
        switch(reg.toUpperCase()){
            case "NZ":
                return "000";
            case "Z":
                return "001";
            case "NC":
                return "010";
            case "C":
                return "011";
            case "PO":
                return "100";
            case "PE":
                return "101";
            case "P":
                return "110";
            case "M":
                return "111";
        }
        return null;
    }

    public String getP(String reg){
        switch(reg.toUpperCase()){
            case "00":
                return "000";
            case "08":
                return "001";
            case "10":
                return "010";
            case "18":
                return "011";
            case "20":
                return "100";
            case "28":
                return "101";
            case "30":
                return "110";
            case "38":
                return "111";
        }
        return null;
    }

    public String getBit(String reg){
        switch(reg.toUpperCase()){
            case "0":
                return "000";
            case "1":
                return "001";
            case "2":
                return "010";
            case "3":
                return "011";
            case "4":
                return "100";
            case "5":
                return "101";
            case "6":
                return "110";
            case "7":
                return "111";
        }
        return null;
    }

    public String binToHex(String bin){
        int i, c = 0;
        int k = 0;
        for (i = bin.length() - 1; i != -1; i--){
            if(bin.charAt(i) == '1'){
                c += Math.pow(2, k);
            }
            k++;
        }
        return String.valueOf(String.format("%02X", c));
    }

    public String getNum8Bits(String n){
        int value = Integer.parseInt(n, 16); 
        return String.valueOf(String.format("%02X", value));
    };
    
    public String getNum16Bits(String n){
        BigInteger value = new BigInteger(n, 16);
        String nn = String.format("%04X", value);
        return (nn.substring(2,4) + nn.substring(0,2));
    };

    public void loadLstFile(){
        try{
            FileWriter fichero = null;
            PrintWriter pw = null;
            fichero = new FileWriter(lst + ".lst");
            pw = new PrintWriter(fichero);
            Iterator<Codigo> it = codigo.iterator();
            while (it.hasNext())
                pw.println(it.next());
            fichero.close();
        }catch(Exception e){}
    }

    public void loadHexFile(){
        try{
            FileWriter fichero = null;
            PrintWriter pw = null;
            fichero = new FileWriter(hex + ".hex");
            pw = new PrintWriter(fichero);
            int nbytes = (CL - dirC);
            int nl = nbytes / 16 + 1;
            Iterator<Codigo> it = codigo.iterator();
            String co = "", ini;
            int n = 0;
            while(nl != 0){
                if(nl == 1)
                    ini = String.format("%02X", nbytes%16);
                else 
                    ini = "10";
                check = ini + String.format("%04X", dirC + 16*n) + "00";
                pw.print(":" + ini + String.format("%04X", dirC + 16*n++) + "00");
                int i = 0, j = 0;
                while (i < 16){
                    if(co.length() == 0)
                        if(it.hasNext())
                            co = it.next().LstToString();
                        else
                            break;
                    j = co.length()/2;
                    if((i+j) > 16){
                        int k = 16 - i;
                        String aux = co.substring(0, 2*k);
                        co = co.substring(2*k);
                        pw.print(aux);
                        check += aux;
                        i += k;
                    }
                    else{
                        pw.print(co);
                        check += co;
                        i += j;
                        co = "";
                    }
                }
                pw.print(compA2());
                pw.println("");
                nl--;
            }
            pw.print(":00000001FF");
            pw.println("");
            fichero.close();
        }catch(Exception e){
            System.out.println(e);
        }
    }

    public String compA2(){
        Integer sum = 0;
        String db = "";
        for (int n = 0; n <check.length(); n++){
            db += check.charAt(n);
            if(n%2 == 1){
                sum += Integer.parseInt((db + ""), 16);
                db = "";
            }
        }
        String bin = Integer.toBinaryString(sum);
        String a2 = "";
        boolean first = false;
        for (int i = bin.length() -1; i >=0; i--){
            if(first){
                if (bin.charAt(i) == '1')
                    a2 = "0" + a2;
                else 
                    a2 = "1" + a2;
            }
            else if(bin.charAt(i) == '1'){
                first = true;
                a2 = bin.charAt(i) + a2;
            }
            else 
                a2 = bin.charAt(i) + a2;
        }
        if(a2.length() > 8)
            a2 = a2.substring(a2.length() - 8);
        check = "";
        return binToHex(a2);
    }  


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicial ::= ii 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 linea = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 CL = new BigInteger(e, 16).intValue(); dirC = CL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicial ::= ORG NN NT$0 SL NT$1 ii 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ii ::= s 
            {
              Object RESULT =null;
		
            for (Map.Entry<String, Etiquetas> eti : table.entrySet())
                if(eti.getValue().llamadas.size() != 0){
                    System.err.println("Semantic error: " + eti.getKey() + " no definida");
                    error = true;
                }
            if(!error){
                if(hex != null)
                    loadHexFile();
                if(lst != null)
                    loadLstFile();
                System.out.println("Successful Assembly");
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ii",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              Object RESULT =null;
 act.linea = linea; linea = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // s ::= eti t com NT$2 SL s 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // s ::= eti t com 
            {
              Object RESULT =null;
		 act.linea = linea; linea = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              Object RESULT =null;
 linea = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // s ::= error NT$3 SL s 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // s ::= error 
            {
              Object RESULT =null;
		 linea = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // eti ::= ETI DOS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    if(table.containsKey(e)){
        if(table.get(e).definicion){
            System.err.println("Semantic error: " + e + " ya fue definida");
            error = true;
        }
        else{
            table.get(e).definicion = true;
            table.get(e).direccion = CL;
            resolver(e);
        }
    }
    else
        table.put(e, new Etiquetas(CL, true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eti",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // eti ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eti",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // t ::= LD ld 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // t ::= JP jp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // t ::= JR jr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // t ::= DJ dj 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // t ::= ADD add 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // t ::= ADC adc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // t ::= SUB sub 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // t ::= SBC sbc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // t ::= AND and 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // t ::= OR or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // t ::= XOR xor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // t ::= CP cp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // t ::= INC inc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // t ::= DEC dec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // t ::= BIT bit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // t ::= SET set 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // t ::= RES res 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // t ::= CALL call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // t ::= RET ret 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // t ::= RETI reti 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // t ::= RETN retn 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // t ::= RST rst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // t ::= DAA daa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // t ::= CPL cpl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // t ::= NEG neg 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // t ::= CCF ccf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // t ::= SCF scf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // t ::= NOP nop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // t ::= HALT halt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // t ::= DI di 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // t ::= EI ei 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // t ::= IM0 im0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // t ::= IM1 im1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // t ::= IM2 im2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // t ::= EX ex 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // t ::= EXX exx 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // t ::= FX fx 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // t ::= LDI ldi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // t ::= LDIR ldir 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // t ::= LDD ldd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // t ::= LDDR lddr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // t ::= CPI cpi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // t ::= CPIR cpir 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // t ::= CPD cpd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // t ::= CPDR cpdr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // t ::= IN in 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // t ::= INI ini 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // t ::= INIR inir 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // t ::= IND ind 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // t ::= INDR indr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // t ::= OUT out 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // t ::= OUTI outi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // t ::= OTIR otir 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // t ::= OUTD outd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // t ::= OTDR otdr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // t ::= RLCA rlca 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // t ::= RLA rla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // t ::= RRCA rrca 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // t ::= RRA rra 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // t ::= RLC rlc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // t ::= RL rl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // t ::= RRC rrc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // t ::= RR rr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // t ::= SLA sla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // t ::= SRA sra 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // t ::= SRL srl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // t ::= RLD rld 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // t ::= RRD rrd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // t ::= PUSH push 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // t ::= POP pop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // com ::= COM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("com",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // com ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("com",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // n ::= N 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("n",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // n ::= B 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("n",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // nn ::= NN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nn",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // nn ::= PH 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nn",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ld ::= reg COMA ld1 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("01" + e1 + e2)); CL += 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ld ::= A COMA ld1 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("01" + getRegistro(e1) + e2)); CL += 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ld ::= reg COMA n 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("00" + e1 + "110") + getNum8Bits(e2)); CL += 2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ld ::= A COMA n 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("00" + getRegistro(e1) + "110") + getNum8Bits(e2)); CL += 2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ld ::= reg COMA LPAR HL RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 insertCode(binToHex("01" + e + "110")); CL += 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ld ::= A COMA LPAR HL RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 insertCode(binToHex("01" + getRegistro(e) + "110")); CL += 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ld ::= reg COMA LPAR IX MAS n RPAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11011101") + binToHex("01" + e1 + "110") + getNum8Bits(e2)); CL += 3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ld ::= A COMA LPAR IX MAS n RPAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11011101") + binToHex("01" + e1 + "110") + getNum8Bits(e2)); CL += 3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ld ::= reg COMA LPAR IY MAS n RPAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11111101") + binToHex("01" + e1 + "110") + getNum8Bits(e2)); CL += 3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ld ::= A COMA LPAR IY MAS n RPAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11111101") + binToHex("01" + e1 + "110") + getNum8Bits(e2)); CL += 3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ld ::= LPAR HL RPAR COMA ld1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("01110" + e)); CL += 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ld ::= LPAR IX MAS n RPAR COMA ld1 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11011101") + binToHex("01110" + e2) + getNum8Bits(e1)); CL += 3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ld ::= LPAR IY MAS n RPAR COMA ld1 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11111101") + binToHex("01110" + e2) + getNum8Bits(e1)); CL += 3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ld ::= LPAR HL RPAR COMA n 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("00110110") + getNum8Bits(e)); CL += 2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ld ::= LPAR IX MAS n RPAR COMA n 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11011101") + binToHex("00110110") + getNum8Bits(e1) + getNum8Bits(e2)); CL += 4;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ld ::= LPAR IY MAS n RPAR COMA n 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11111101") + binToHex("00110110") + getNum8Bits(e1) + getNum8Bits(e2)); CL += 4;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ld ::= A COMA LPAR BC RPAR 
            {
              Object RESULT =null;
		 insertCode(binToHex("00001010")); CL +=1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ld ::= A COMA LPAR DE RPAR 
            {
              Object RESULT =null;
		 insertCode(binToHex("00011010")); CL +=1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ld ::= A COMA LPAR nn RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("00111010") + getNum16Bits(e)); CL +=3; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ld ::= LPAR BC RPAR COMA A 
            {
              Object RESULT =null;
		 insertCode(binToHex("00001010")); CL +=1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ld ::= LPAR DE RPAR COMA A 
            {
              Object RESULT =null;
		 insertCode(binToHex("00001010")); CL +=1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ld ::= LPAR nn RPAR COMA A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 insertCode(binToHex("00110010") + getNum16Bits(e)); CL +=3; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ld ::= A COMA I 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101101") + binToHex("01010111")); CL +=2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ld ::= A COMA R 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101101") + binToHex("01011111")); CL +=2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ld ::= I COMA A 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101101") + binToHex("01000111")); CL +=2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ld ::= R COMA A 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101101") + binToHex("01001111")); CL +=2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ld1 ::= reg 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ld1 ::= A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = getRegistro(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // reg ::= REG 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = getRegistro(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // reg ::= C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = getRegistro(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // jp ::= ETI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 validarEti(e, binToHex("11000011"), "JP"); CL += 3; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // jp ::= cond COMA ETI 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 validarEti(e, binToHex("11" + e1 + "011"), "JP"); CL += 3; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // jp ::= LPAR HL RPAR 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101001")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // jp ::= LPAR IX RPAR 
            {
              Object RESULT =null;
		 insertCode(binToHex("11011101") + binToHex("11101001")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // jp ::= LPAR IY RPAR 
            {
              Object RESULT =null;
		 insertCode(binToHex("11111101") + binToHex("11101001")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // cond ::= NZ 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = getCondition(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // cond ::= Z 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = getCondition(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // cond ::= NC 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = getCondition(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // cond ::= C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = getCondition(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // cond ::= PO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = getCondition(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // cond ::= PE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = getCondition(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // cond ::= P 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = getCondition(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // cond ::= M 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = getCondition(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // jr ::= ETI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 validarEti(e, binToHex("00011000"), "JR");CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // jr ::= C COMA ETI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 validarEti(e, binToHex("00111000"), "JR");CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // jr ::= NC COMA ETI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 validarEti(e, binToHex("00110000"), "JR");CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // jr ::= Z COMA ETI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 validarEti(e, binToHex("00101000"), "JR");CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // jr ::= NZ COMA ETI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 validarEti(e, binToHex("00100000"), "JR");CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // dj ::= NZ COMA ETI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 validarEti(e, binToHex("00010000"), "JR");CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dj",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // add ::= A COMA ld1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("10000" + e)); CL += 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // add ::= A COMA n 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11000110") + getNum8Bits(e)); CL += 2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // add ::= A COMA LPAR HL RPAR 
            {
              Object RESULT =null;
		 insertCode(binToHex("10000110")); CL += 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // add ::= A COMA LPAR IX MAS n RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11011101") + binToHex("10000110") + getNum8Bits(e)); CL += 3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // add ::= A COMA LPAR IY MAS n RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11111101") + binToHex("10000110") + getNum8Bits(e)); CL += 3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // adc ::= A COMA ld1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("10001" + e)); CL += 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("adc",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // adc ::= A COMA n 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11001110") + getNum8Bits(e)); CL += 2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("adc",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // adc ::= A COMA LPAR HL RPAR 
            {
              Object RESULT =null;
		 insertCode(binToHex("10001110")); CL += 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("adc",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // adc ::= A COMA LPAR IX MAS n RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11011101") + binToHex("10001110") + getNum8Bits(e)); CL += 3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("adc",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // adc ::= A COMA LPAR IY MAS n RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11111101") + binToHex("10001110") + getNum8Bits(e)); CL += 3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("adc",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // sub ::= A COMA ld1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("10010" + e)); CL += 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // sub ::= A COMA n 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11010110") + getNum8Bits(e)); CL += 2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // sub ::= A COMA LPAR HL RPAR 
            {
              Object RESULT =null;
		 insertCode(binToHex("10010110")); CL += 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // sub ::= A COMA LPAR IX MAS n RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11011101") + binToHex("10010110") + getNum8Bits(e)); CL += 3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // sub ::= A COMA LPAR IY MAS n RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11111101") + binToHex("10010110") + getNum8Bits(e)); CL += 3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // sbc ::= A COMA ld1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("10011" + e)); CL += 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sbc",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // sbc ::= A COMA n 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11011110") + getNum8Bits(e)); CL += 2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sbc",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // sbc ::= A COMA LPAR HL RPAR 
            {
              Object RESULT =null;
		 insertCode(binToHex("10001110")); CL += 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sbc",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // sbc ::= A COMA LPAR IX MAS n RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11011101") + binToHex("10011110") + getNum8Bits(e)); CL += 3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sbc",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // sbc ::= A COMA LPAR IY MAS n RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11111101") + binToHex("10011110") + getNum8Bits(e)); CL += 3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sbc",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // and ::= ld1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("10100" + e)); CL += 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("and",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // and ::= n 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11100110") + getNum8Bits(e)); CL += 2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("and",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // and ::= LPAR HL RPAR 
            {
              Object RESULT =null;
		 insertCode(binToHex("10100110")); CL += 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("and",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // and ::= LPAR IX MAS n RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11011101") + binToHex("10100110") + getNum8Bits(e)); CL += 3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("and",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // and ::= LPAR IY MAS n RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11111101") + binToHex("10100110") + getNum8Bits(e)); CL += 3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("and",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // or ::= ld1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("10110" + e)); CL += 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("or",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // or ::= n 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11110110") + getNum8Bits(e)); CL += 2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("or",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // or ::= LPAR HL RPAR 
            {
              Object RESULT =null;
		 insertCode(binToHex("10110110")); CL += 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("or",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // or ::= LPAR IX MAS n RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11011101") + binToHex("10110110") + getNum8Bits(e)); CL += 3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("or",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // or ::= LPAR IY MAS n RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11111101") + binToHex("10110110") + getNum8Bits(e)); CL += 3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("or",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // xor ::= ld1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("10101" + e)); CL += 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("xor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // xor ::= n 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11101110") + getNum8Bits(e)); CL += 2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("xor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // xor ::= LPAR HL RPAR 
            {
              Object RESULT =null;
		 insertCode(binToHex("10101110")); CL += 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("xor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // xor ::= LPAR IX MAS n RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11011101") + binToHex("10101110") + getNum8Bits(e)); CL += 3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("xor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // xor ::= LPAR IY MAS n RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11111101") + binToHex("10101110") + getNum8Bits(e)); CL += 3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("xor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // cp ::= ld1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("10111" + e)); CL += 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // cp ::= n 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11111110") + getNum8Bits(e)); CL += 2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // cp ::= LPAR HL RPAR 
            {
              Object RESULT =null;
		 insertCode(binToHex("10111110")); CL += 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // cp ::= LPAR IX MAS n RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11011101") + binToHex("10111110") + getNum8Bits(e)); CL += 3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // cp ::= LPAR IY MAS n RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11111101") + binToHex("10111110") + getNum8Bits(e)); CL += 3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // inc ::= ld1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("00" + e + "100")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // inc ::= LPAR HL RPAR 
            {
              Object RESULT =null;
		 insertCode(binToHex("00110100")); CL += 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // inc ::= LPAR IX MAS n RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11011101") + binToHex("00110100") + getNum8Bits(e)); CL += 3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // inc ::= LPAR IY MAS n RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11111101") + binToHex("00110100") + getNum8Bits(e)); CL += 3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // dec ::= ld1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("00" + e + "101")); CL+=1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // dec ::= LPAR HL RPAR 
            {
              Object RESULT =null;
		 insertCode(binToHex("00110101")); CL += 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // dec ::= LPAR IX MAS n RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11011101") + binToHex("00110101") + getNum8Bits(e)); CL += 3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // dec ::= LPAR IY MAS n RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11111101") + binToHex("00110101") + getNum8Bits(e)); CL += 3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // bit ::= B COMA ld1 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11001011") + binToHex("01" + getBit(e1) + e2)); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bit",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // bit ::= B LPAR HL RPAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 insertCode(binToHex("11001011") + binToHex("01" + getBit(e1) + "110")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bit",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // bit ::= B LPAR IX MAS n RPAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11011101") + binToHex("11001011") + getNum8Bits(e2) + binToHex("01" + getBit(e1) + "110")); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bit",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // bit ::= B LPAR IY MAS n RPAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11111101") + binToHex("11001011") + getNum8Bits(e2) + binToHex("01" + getBit(e1) + "110")); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bit",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // set ::= B COMA ld1 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11001011") + binToHex("11" + getBit(e1) + e2)); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // set ::= B LPAR HL RPAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 insertCode(binToHex("11001011") + binToHex("11" + getBit(e1) + "110")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // set ::= B LPAR IX MAS n RPAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11011101") + binToHex("11001011") + getNum8Bits(e2) + binToHex("11" + getBit(e1) + "110")); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // set ::= B LPAR IY MAS n RPAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11111101") + binToHex("11001011") + getNum8Bits(e2) + binToHex("11" + getBit(e1) + "110")); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // res ::= B COMA ld1 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11001011") + binToHex("10" + getBit(e1) + e2)); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("res",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // res ::= B LPAR HL RPAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 insertCode(binToHex("11001011") + binToHex("10" + getBit(e1) + "110")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("res",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // res ::= B LPAR IX MAS n RPAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11011101") + binToHex("11001011") + getNum8Bits(e2) + binToHex("10" + getBit(e1) + "110")); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("res",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // res ::= B LPAR IY MAS n RPAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11111101") + binToHex("11001011") + getNum8Bits(e2) + binToHex("10" + getBit(e1) + "110")); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("res",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // call ::= ETI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 validarEti(e, binToHex("11001101"), "JP"); CL += 3; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // call ::= cond COMA ETI 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 validarEti(e, binToHex("11" + e1 + "100"), "JP"); CL += 3; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // ret ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("11001001")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ret",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // ret ::= cond 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11" + e + "000")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ret",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // reti ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101101") + binToHex("01001101")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reti",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // retn ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101101") + binToHex("01000101")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("retn",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // rst ::= PH 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11" + getP(e) + "111")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rst",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // daa ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("00100111")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("daa",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // cpl ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("00101111")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cpl",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // neg ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101101") + binToHex("01000100")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("neg",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // ccf ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("00111111")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ccf",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // scf ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("00110111")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scf",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // nop ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("00000000")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nop",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // halt ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("01110110")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("halt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // di ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("11110011")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("di",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // ei ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("11111011")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ei",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // im0 ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101101") + binToHex("01000110")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("im0",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // im1 ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101101") + binToHex("01010110")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("im1",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // im2 ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101101") + binToHex("01011110")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("im2",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // ex ::= DE COMA HL 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101011")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // ex ::= AF COMA AF 
            {
              Object RESULT =null;
		 insertCode(binToHex("00001000")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // ex ::= LPAR SP RPAR COMA HL 
            {
              Object RESULT =null;
		 insertCode(binToHex("11100011")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // ex ::= LPAR SP RPAR COMA IX 
            {
              Object RESULT =null;
		 insertCode(binToHex("11011101") + binToHex("11100011")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // ex ::= LPAR SP RPAR COMA IY 
            {
              Object RESULT =null;
		 insertCode(binToHex("11111101") + binToHex("11100011")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // exx ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("11011001")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exx",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // ldi ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101101") + binToHex("10100000")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ldi",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // ldir ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101101") + binToHex("10110000")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ldir",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // ldd ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101101") + binToHex("10101000")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ldd",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // lddr ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101101") + binToHex("10111000")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lddr",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // cpi ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101101") + binToHex("10100001")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cpi",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // cpir ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101101") + binToHex("10110001")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cpir",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // cpd ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101101") + binToHex("10101001")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cpd",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // cpdr ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101101") + binToHex("10111001")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cpdr",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // in ::= A COMA LPAR n RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11011011") + getNum8Bits(e)); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("in",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // in ::= reg COMA LPAR C RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 insertCode(binToHex("11101101") + binToHex("01" + e + "000")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("in",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // in ::= A COMA LPAR C RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 insertCode(binToHex("11101101") + binToHex("01" + getRegistro(e) + "000")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("in",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // ini ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101101") + binToHex("10100010")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // inir ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101101") + binToHex("10110010")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inir",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // ind ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101101") + binToHex("10101010")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ind",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // indr ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101101") + binToHex("10111010")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("indr",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // out ::= LPAR n RPAR COMA A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 insertCode(binToHex("11010011") + getNum8Bits(e)); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("out",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // out ::= LPAR C RPAR COMA ld1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11101101") + binToHex("01" + e + "001")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("out",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // outi ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101101") + binToHex("10100011")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("outi",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // otir ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101101") + binToHex("10110011")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("otir",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // outd ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101101") + binToHex("10101011")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("outd",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // otdr ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101101") + binToHex("10111011")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("otdr",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // ss ::= BC 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = getRegistro2Bits(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // ss ::= DE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = getRegistro2Bits(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // ss ::= HL 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = getRegistro2Bits(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // ss ::= SP 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = getRegistro2Bits(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // ss ::= IX 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = getRegistro2Bits(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // ss ::= IY 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = getRegistro2Bits(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // add ::= HL COMA ss 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("00" + e + "1001")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // add ::= IX COMA ss 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11011101") + binToHex("00" + e + "1001")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // add ::= IY COMA ss 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11111101") + binToHex("00" + e + "1001")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // adc ::= HL COMA ss 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11101101") + binToHex("01" + e + "1010")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("adc",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // sbc ::= HL COMA ss 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11101101") + binToHex("01" + e + "0010")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sbc",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // inc ::= BC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("00" + getRegistro2Bits(e) + "0011")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // inc ::= DE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("00" + getRegistro2Bits(e) + "0011")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // inc ::= HL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("00" + getRegistro2Bits(e) + "0011")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // inc ::= SP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("00" + getRegistro2Bits(e) + "0011")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // inc ::= IX 
            {
              Object RESULT =null;
		 insertCode(binToHex("11011101") + binToHex("00100011")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // inc ::= IY 
            {
              Object RESULT =null;
		 insertCode(binToHex("11111101") + binToHex("00100011")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // dec ::= BC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("00" + getRegistro2Bits(e) + "1011")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // dec ::= DE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("00" + getRegistro2Bits(e) + "1011")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // dec ::= HL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("00" + getRegistro2Bits(e) + "1011")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // dec ::= SP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("00" + getRegistro2Bits(e) + "1011")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // dec ::= IX 
            {
              Object RESULT =null;
		 insertCode(binToHex("11011101") + binToHex("00101011")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // dec ::= IY 
            {
              Object RESULT =null;
		 insertCode(binToHex("11111101") + binToHex("00101011")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // rlca ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("00000111")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rlca",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // rla ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("00010111")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rla",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // rrca ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("00001111")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rrca",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // rra ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("00011111")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rra",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // rlc ::= ld1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11001011") + binToHex("00" + "000" + e)); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rlc",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // rlc ::= LPAR HL RPAR 
            {
              Object RESULT =null;
		 insertCode(binToHex("11001011") + binToHex("00" + "000" + "110")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rlc",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // rlc ::= LPAR IX MAS N RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11011101") + binToHex("11001011") + getNum8Bits(e) +binToHex("00" + "000" + "110")); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rlc",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // rlc ::= LPAR IY MAS N RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11111101") + binToHex("11001011") + getNum8Bits(e) +binToHex("00" + "000" + "110")); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rlc",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // rl ::= ld1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11001011") + binToHex("00" + "010" + e)); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rl",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // rl ::= LPAR HL RPAR 
            {
              Object RESULT =null;
		 insertCode(binToHex("11001011") + binToHex("00" + "010" + "110")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rl",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // rl ::= LPAR IX MAS N RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11011101") + binToHex("11001011") + getNum8Bits(e) +binToHex("00" + "010" + "110")); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rl",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // rl ::= LPAR IY MAS N RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11111101") + binToHex("11001011") + getNum8Bits(e) +binToHex("00" + "010" + "110")); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rl",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // rrc ::= ld1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11001011") + binToHex("00" + "001" + e)); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rrc",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // rrc ::= LPAR HL RPAR 
            {
              Object RESULT =null;
		 insertCode(binToHex("11001011") + binToHex("00" + "110" + "001")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rrc",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // rrc ::= LPAR IX MAS N RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11011101") + binToHex("11001011") + getNum8Bits(e) +binToHex("00" + "001" + "110")); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rrc",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // rrc ::= LPAR IY MAS N RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11111101") + binToHex("11001011") + getNum8Bits(e) +binToHex("00" + "001" + "110")); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rrc",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // rr ::= ld1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11001011") + binToHex("00" + "011" + e)); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rr",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // rr ::= LPAR HL RPAR 
            {
              Object RESULT =null;
		 insertCode(binToHex("11001011") + binToHex("00" + "011" + "001")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rr",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // rr ::= LPAR IX MAS N RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11011101") + binToHex("11001011") + getNum8Bits(e) +binToHex("00" + "011" + "110")); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rr",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // rr ::= LPAR IY MAS N RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11111101") + binToHex("11001011") + getNum8Bits(e) +binToHex("00" + "011" + "110")); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rr",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // sla ::= ld1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11001011") + binToHex("00" + "100" + e)); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sla",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // sla ::= LPAR HL RPAR 
            {
              Object RESULT =null;
		 insertCode(binToHex("11001011") + binToHex("00" + "100" + "001")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sla",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // sla ::= LPAR IX MAS N RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11011101") + binToHex("11001011") + getNum8Bits(e) +binToHex("00" + "100" + "110")); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sla",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // sla ::= LPAR IY MAS N RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11111101") + binToHex("11001011") + getNum8Bits(e) +binToHex("00" + "100" + "110")); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sla",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // sra ::= ld1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11001011") + binToHex("00" + "101" + e)); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sra",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // sra ::= LPAR HL RPAR 
            {
              Object RESULT =null;
		 insertCode(binToHex("11001011") + binToHex("00" + "101" + "001")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sra",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // sra ::= LPAR IX MAS N RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11011101") + binToHex("11001011") + getNum8Bits(e) +binToHex("00" + "101" + "110")); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sra",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // sra ::= LPAR IY MAS N RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11111101") + binToHex("11001011") + getNum8Bits(e) +binToHex("00" + "101" + "110")); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sra",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // srl ::= ld1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11001011") + binToHex("00" + "111" + e)); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("srl",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // srl ::= LPAR HL RPAR 
            {
              Object RESULT =null;
		 insertCode(binToHex("11001011") + binToHex("00" + "111" + "001")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("srl",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // srl ::= LPAR IX MAS N RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11011101") + binToHex("11001011") + getNum8Bits(e) +binToHex("00" + "111" + "110")); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("srl",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // srl ::= LPAR IY MAS N RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11111101") + binToHex("11001011") + getNum8Bits(e) +binToHex("00" + "111" + "110")); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("srl",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000001(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // rld ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101101") + binToHex("01101111")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rld",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // rrd ::= 
            {
              Object RESULT =null;
		 insertCode(binToHex("11101101") + binToHex("01100111")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rrd",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // ld ::= BC COMA nn 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("00000001") + getNum16Bits(e)); CL += 3; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // ld ::= DE COMA nn 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("00010001") + getNum16Bits(e)); CL += 3; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // ld ::= HL COMA nn 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("00100001") + getNum16Bits(e)); CL += 3; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // ld ::= SP COMA nn 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("00110001") + getNum16Bits(e)); CL += 3; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // ld ::= LPAR IX COMA nn 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11011101") + binToHex("00100001") + getNum16Bits(e)); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // ld ::= LPAR IY COMA nn 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insertCode(binToHex("11111101") + binToHex("00100001") + getNum16Bits(e)); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // ld ::= BC COMA LPAR nn RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11101101") + binToHex("01001011") + getNum16Bits(e)); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // ld ::= DE COMA LPAR nn RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11101101") + binToHex("01011011") + getNum16Bits(e)); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // ld ::= HL COMA LPAR nn RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11101101") + binToHex("01101011") + getNum16Bits(e)); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // ld ::= SP COMA LPAR nn RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11101101") + binToHex("01111011") + getNum16Bits(e)); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // ld ::= LPAR IX COMA LPAR nn RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11011101") + binToHex("00101010") + getNum16Bits(e)); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // ld ::= LPAR IY COMA LPAR nn RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 insertCode(binToHex("11111101") + binToHex("00101010") + getNum16Bits(e)); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // ld ::= LPAR nn RPAR BC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 insertCode(binToHex("11101101") + binToHex("00000011") + getNum16Bits(e)); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // ld ::= LPAR nn RPAR DE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 insertCode(binToHex("11101101") + binToHex("00010011") + getNum16Bits(e)); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // ld ::= LPAR nn RPAR HL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 insertCode(binToHex("11101101") + binToHex("00100011") + getNum16Bits(e)); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // ld ::= LPAR nn RPAR SP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 insertCode(binToHex("11101101") + binToHex("00110011") + getNum16Bits(e)); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // ld ::= LPAR nn RPAR COMA IX 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 insertCode(binToHex("11011101") + binToHex("00100010") + getNum16Bits(e)); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // ld ::= LPAR nn RPAR COMA IY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 insertCode(binToHex("11111101") + binToHex("00100010") + getNum16Bits(e)); CL += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // ld ::= SP COMA HL 
            {
              Object RESULT =null;
		 insertCode(binToHex("11111001")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // ld ::= SP COMA IX 
            {
              Object RESULT =null;
		 insertCode(binToHex("11011101") + binToHex("11111001")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // ld ::= SP COMA IY 
            {
              Object RESULT =null;
		 insertCode(binToHex("11111101") + binToHex("11111001")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ld",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // push ::= BC 
            {
              Object RESULT =null;
		 insertCode(binToHex("11000101")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("push",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // push ::= DE 
            {
              Object RESULT =null;
		 insertCode(binToHex("11010101")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("push",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // push ::= HL 
            {
              Object RESULT =null;
		 insertCode(binToHex("11100101")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("push",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // push ::= AF 
            {
              Object RESULT =null;
		 insertCode(binToHex("11110101")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("push",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // push ::= IX 
            {
              Object RESULT =null;
		 insertCode(binToHex("11011101") + binToHex("11100101")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("push",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // push ::= IY 
            {
              Object RESULT =null;
		 insertCode(binToHex("11111101") + binToHex("11100101")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("push",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // pop ::= BC 
            {
              Object RESULT =null;
		 insertCode(binToHex("11000001")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pop",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // pop ::= DE 
            {
              Object RESULT =null;
		 insertCode(binToHex("11010001")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pop",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // pop ::= HL 
            {
              Object RESULT =null;
		 insertCode(binToHex("11100001")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pop",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // pop ::= AF 
            {
              Object RESULT =null;
		 insertCode(binToHex("11110001")); CL += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pop",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // pop ::= IX 
            {
              Object RESULT =null;
		 insertCode(binToHex("11011101") + binToHex("11100001")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pop",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // pop ::= IY 
            {
              Object RESULT =null;
		 insertCode(binToHex("11111101") + binToHex("11100001")); CL += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pop",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$parser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$parser$do_action_part00000001(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
