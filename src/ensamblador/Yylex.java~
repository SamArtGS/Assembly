/* The following code was generated by JFlex 1.7.0 */

package ensamblador;

import java_cup.runtime.*;

/*
Directivas:
public: clase publica
cup: compatibilidad con cup
full: extender el alfabeto con todos los valores de 8 bits
line: agrega la variable int yyline, para indicar la fila del lexema
char: agrega la variable int yychar, indica el indice del primer caracter del lexema
ignorecase: validar, indistitntamente si la letra es mayuscula o minuscula
eofval: especifica un valor de retorno al final del archivo
*/


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>yylex.lex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 36, 43, 48, 48, 47,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    36,  0,  0,  0,  0,  0,  0,  0, 12, 13,  0, 15, 14,  0,  0,  0, 
     4,  7,  8,  9, 11, 11, 11, 11,  6, 10, 16, 42,  0,  0,  0,  0, 
     0, 23, 38, 25, 21, 29, 31,  3,  5, 46, 39, 44, 26, 35, 27,  1, 
    17, 44,  2, 45, 32, 18, 44, 44, 34, 40, 41,  0,  0,  0,  0, 44, 
     0, 22, 37, 24, 20, 28, 30,  3,  5, 46, 39, 44, 26, 35, 27,  1, 
    17, 44,  2, 45, 32, 18, 44, 44, 34, 40, 41,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\2\1\4\1\5\1\6"+
    "\1\4\1\7\1\10\1\11\1\12\1\13\1\14\1\1"+
    "\2\5\2\15\2\16\1\5\1\2\2\5\1\2\1\6"+
    "\1\17\1\2\1\20\1\21\2\5\1\2\1\22\1\23"+
    "\1\24\1\2\1\17\1\25\2\2\1\26\1\0\1\27"+
    "\2\2\1\6\1\30\1\6\1\2\1\31\1\32\1\2"+
    "\1\33\1\0\1\34\5\0\1\2\1\35\1\36\1\37"+
    "\1\36\1\6\1\35\2\2\1\40\1\6\1\40\1\41"+
    "\2\2\2\6\1\42\1\2\1\43\1\2\1\44\3\45"+
    "\1\46\1\47\1\0\1\50\1\2\1\51\1\0\1\2"+
    "\1\51\1\52\1\53\1\2\1\34\5\2\1\46\1\47"+
    "\1\2\1\50\1\54\1\55\1\2\1\0\1\2\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\65\1\61\1\2\1\67\1\2\1\70\1\0\1\2"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\100\1\101\1\102\1\103\1\104\1\102\1\103"+
    "\1\45\1\105\1\45\1\2\2\106\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\2\120\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\111\1\112"+
    "\1\113\1\114\1\115\1\116\1\121\2\122\1\123\2\124"+
    "\1\125\1\126\1\127\2\130\1\131\2\132\1\133\1\134"+
    "\1\135\1\134\1\135";

  private static int [] zzUnpackAction() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0157\0\61\0\61\0\61\0\61\0\61\0\u0188\0\u01b9"+
    "\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df\0\u0310\0\u0341"+
    "\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467\0\304\0\u0498"+
    "\0\u04c9\0\u04fa\0\u052b\0\304\0\u055c\0\u058d\0\u05be\0\u05ef"+
    "\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777"+
    "\0\u07a8\0\304\0\u07d9\0\u080a\0\304\0\u083b\0\u086c\0\304"+
    "\0\u089d\0\61\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3"+
    "\0\u09f4\0\61\0\304\0\304\0\u0a25\0\u0a56\0\u0a87\0\u0ab8"+
    "\0\304\0\u0ae9\0\u07d9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde"+
    "\0\u0c0f\0\u0c40\0\304\0\u0c71\0\304\0\61\0\u03d4\0\304"+
    "\0\u0ca2\0\61\0\u0cd3\0\61\0\u0d04\0\304\0\u0d35\0\u0d66"+
    "\0\u07d9\0\304\0\304\0\u0d97\0\304\0\u0dc8\0\u0df9\0\u0e2a"+
    "\0\u0e5b\0\u0e8c\0\u0ebd\0\304\0\u0eee\0\304\0\304\0\u0f1f"+
    "\0\u0f50\0\u0f81\0\u0fb2\0\304\0\304\0\u0fe3\0\61\0\304"+
    "\0\304\0\u1014\0\61\0\u1045\0\304\0\304\0\u07d9\0\304"+
    "\0\u1076\0\304\0\u10a7\0\u10d8\0\61\0\61\0\61\0\61"+
    "\0\61\0\61\0\61\0\304\0\304\0\u07d9\0\u07d9\0\304"+
    "\0\304\0\304\0\u07d9\0\u07d9\0\u1109\0\304\0\u113a\0\u116b"+
    "\0\304\0\u07d9\0\304\0\304\0\u119c\0\61\0\u11cd\0\61"+
    "\0\61\0\61\0\304\0\61\0\304\0\304\0\304\0\304"+
    "\0\304\0\304\0\304\0\304\0\u11fe\0\304\0\u122f\0\304"+
    "\0\304\0\304\0\304\0\61\0\304\0\304\0\61\0\304"+
    "\0\304\0\304\0\304\0\61\0\304\0\304\0\61\0\304"+
    "\0\304\0\61\0\61\0\304\0\304";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\3\6"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\5\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\5\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\5\1\44"+
    "\1\45\1\46\1\5\1\47\1\50\1\46\63\0\1\5"+
    "\1\51\11\5\5\0\1\5\1\52\1\0\14\5\1\53"+
    "\1\0\2\5\1\0\5\5\2\0\3\5\3\0\1\5"+
    "\1\54\11\5\5\0\2\5\1\55\6\5\1\56\1\5"+
    "\2\57\3\5\1\0\2\5\1\0\5\5\2\0\1\5"+
    "\1\60\1\5\3\0\13\5\5\0\2\5\1\0\15\5"+
    "\1\0\2\5\1\0\5\5\2\0\3\5\3\0\3\5"+
    "\1\61\1\62\1\61\5\63\5\0\2\5\1\0\1\5"+
    "\1\63\1\5\1\63\1\5\1\63\3\5\1\63\1\5"+
    "\1\63\1\5\1\0\2\5\1\0\1\5\1\63\3\5"+
    "\2\0\3\5\3\0\13\5\5\0\2\5\1\0\2\5"+
    "\2\64\2\5\1\65\6\5\1\0\2\5\1\0\5\5"+
    "\2\0\3\5\3\0\3\5\1\63\1\62\6\63\5\0"+
    "\2\5\1\0\1\5\1\63\1\5\1\63\1\5\1\63"+
    "\3\5\1\63\1\5\1\63\1\5\1\0\2\5\1\0"+
    "\1\5\1\63\3\5\2\0\3\5\3\0\1\66\12\5"+
    "\5\0\1\5\1\67\1\0\10\5\2\70\3\5\1\0"+
    "\2\5\1\0\5\5\2\0\3\5\4\0\1\71\16\0"+
    "\1\72\1\73\5\0\2\74\1\75\1\0\2\76\7\0"+
    "\2\77\13\0\13\5\5\0\2\5\1\0\2\5\2\100"+
    "\4\5\2\101\3\5\1\102\2\5\1\0\2\5\1\103"+
    "\2\5\2\0\2\5\1\104\3\0\3\5\1\63\1\62"+
    "\6\63\5\0\2\5\1\0\1\5\1\63\1\100\1\105"+
    "\1\5\1\63\2\5\1\101\1\106\1\5\1\63\1\5"+
    "\1\102\2\5\1\0\1\5\1\63\1\103\2\5\2\0"+
    "\2\5\1\104\3\0\13\5\5\0\2\5\1\0\2\107"+
    "\5\5\1\110\2\5\2\111\1\5\1\0\2\5\1\0"+
    "\5\5\2\0\3\5\3\0\3\5\1\63\1\62\6\63"+
    "\5\0\2\5\1\0\1\107\1\112\1\5\1\63\1\5"+
    "\1\63\1\5\1\110\1\5\1\63\1\111\1\113\1\5"+
    "\1\0\2\5\1\0\1\5\1\63\3\5\2\0\3\5"+
    "\3\0\13\5\5\0\1\114\1\5\1\0\2\5\2\115"+
    "\2\116\7\5\1\0\2\5\1\0\5\5\2\0\3\5"+
    "\3\0\3\5\1\63\1\62\6\63\5\0\1\114\1\5"+
    "\1\0\1\5\1\63\1\115\1\117\1\116\1\120\3\5"+
    "\1\63\1\5\1\63\1\5\1\0\2\5\1\0\1\5"+
    "\1\63\3\5\2\0\3\5\3\0\13\5\5\0\2\5"+
    "\1\0\2\121\13\5\1\0\2\5\1\0\5\5\2\0"+
    "\3\5\3\0\1\122\12\5\5\0\2\5\1\0\4\5"+
    "\2\123\2\5\2\124\3\5\1\0\2\5\1\0\4\5"+
    "\1\125\2\0\3\5\3\0\13\5\5\0\2\5\1\0"+
    "\15\5\1\126\1\127\1\5\1\0\5\5\2\0\2\5"+
    "\1\130\3\0\3\5\1\63\1\62\6\63\5\0\2\5"+
    "\1\0\1\5\1\63\1\5\1\63\1\5\1\63\3\5"+
    "\1\63\1\5\1\63\1\5\1\126\1\127\1\5\1\0"+
    "\1\5\1\63\3\5\2\0\2\5\1\130\3\0\13\5"+
    "\5\0\2\5\1\0\15\5\1\0\1\130\1\5\1\0"+
    "\5\5\2\0\3\5\3\0\3\5\1\63\1\62\6\63"+
    "\5\0\2\5\1\0\1\5\1\63\1\5\1\63\1\5"+
    "\1\63\3\5\1\63\1\5\1\63\1\5\1\0\1\130"+
    "\1\5\1\0\1\5\1\63\3\5\2\0\3\5\35\0"+
    "\1\131\6\0\1\132\1\133\4\0\1\134\11\0\1\135"+
    "\12\5\5\0\2\5\1\0\15\5\1\0\2\5\1\0"+
    "\5\5\2\0\3\5\46\0\1\40\15\0\13\5\5\0"+
    "\2\5\1\0\4\5\2\136\7\5\1\137\2\5\1\0"+
    "\5\5\2\0\2\5\1\140\3\0\3\5\1\63\1\62"+
    "\6\63\5\0\2\5\1\0\1\5\1\63\1\5\1\63"+
    "\1\136\1\141\3\5\1\63\1\5\1\63\1\5\1\137"+
    "\2\5\1\0\1\5\1\63\3\5\2\0\2\5\1\140"+
    "\3\0\1\5\1\142\11\5\5\0\1\143\1\5\1\0"+
    "\15\5\1\0\2\5\1\0\5\5\2\0\3\5\2\0"+
    "\53\45\1\0\5\45\53\0\1\46\3\0\1\46\2\0"+
    "\1\5\1\144\11\5\5\0\1\145\1\146\1\0\4\5"+
    "\2\147\1\150\1\5\2\151\3\5\1\0\2\5\1\0"+
    "\2\152\3\5\2\0\3\5\3\0\13\5\5\0\2\5"+
    "\1\0\7\5\1\153\5\5\1\0\1\154\1\155\1\0"+
    "\3\5\1\156\1\5\2\0\3\5\3\0\2\5\1\157"+
    "\10\5\5\0\2\5\1\0\15\5\1\0\2\5\1\0"+
    "\5\5\2\0\3\5\3\0\13\5\5\0\2\5\1\0"+
    "\14\5\1\160\1\0\2\5\1\0\5\5\2\0\3\5"+
    "\3\0\13\5\5\0\2\5\1\0\2\161\13\5\1\162"+
    "\2\5\1\0\5\5\2\0\2\5\1\163\3\0\13\5"+
    "\5\0\2\5\1\0\2\164\2\165\2\166\7\5\1\0"+
    "\2\5\1\0\5\5\2\0\3\5\42\0\1\167\21\0"+
    "\13\5\5\0\2\5\1\0\2\170\2\171\2\172\7\5"+
    "\1\0\2\5\1\0\5\5\2\0\3\5\3\0\13\5"+
    "\5\0\2\5\1\173\14\5\1\174\1\0\2\5\1\0"+
    "\5\5\2\0\1\5\1\175\1\5\3\0\13\5\5\0"+
    "\2\5\1\0\14\5\1\176\1\0\2\5\1\0\5\5"+
    "\2\0\3\5\3\0\3\5\1\177\1\200\6\177\5\0"+
    "\2\5\1\0\1\5\1\177\1\5\1\177\1\5\1\177"+
    "\3\5\1\177\1\5\1\177\1\5\1\0\2\5\1\0"+
    "\1\5\1\177\3\5\2\0\3\5\3\0\3\5\1\177"+
    "\1\62\6\177\5\0\2\5\1\0\1\5\1\177\1\5"+
    "\1\177\1\5\1\177\3\5\1\177\1\5\1\177\1\5"+
    "\1\0\2\5\1\0\1\5\1\177\3\5\2\0\3\5"+
    "\3\0\13\5\5\0\2\5\1\0\6\5\1\201\6\5"+
    "\1\0\2\5\1\0\5\5\2\0\3\5\3\0\13\5"+
    "\5\0\1\202\1\5\1\0\15\5\1\0\2\5\1\0"+
    "\5\5\2\0\3\5\3\0\13\5\5\0\2\5\1\203"+
    "\15\5\1\0\2\5\1\0\5\5\2\0\1\5\1\204"+
    "\1\5\30\0\2\205\2\0\1\206\73\0\2\207\50\0"+
    "\2\210\47\0\2\211\71\0\1\212\50\0\2\213\30\0"+
    "\13\5\5\0\2\5\1\0\2\5\2\214\11\5\1\0"+
    "\2\5\1\0\5\5\2\0\3\5\3\0\13\5\5\0"+
    "\2\5\1\0\4\5\2\215\7\5\1\0\2\5\1\0"+
    "\5\5\2\0\3\5\3\0\3\5\1\177\1\62\6\177"+
    "\5\0\2\5\1\0\1\5\1\177\1\214\1\216\1\5"+
    "\1\177\3\5\1\177\1\5\1\177\1\5\1\0\2\5"+
    "\1\0\1\5\1\177\3\5\2\0\3\5\3\0\3\5"+
    "\1\177\1\62\6\177\5\0\2\5\1\0\1\5\1\177"+
    "\1\5\1\177\1\215\1\217\3\5\1\177\1\5\1\177"+
    "\1\5\1\0\2\5\1\0\1\5\1\177\3\5\2\0"+
    "\3\5\3\0\13\5\5\0\2\5\1\0\2\220\2\5"+
    "\2\221\7\5\1\0\2\5\1\0\5\5\2\0\3\5"+
    "\3\0\13\5\5\0\2\5\1\0\2\222\13\5\1\0"+
    "\2\5\1\0\5\5\2\0\3\5\3\0\3\5\1\177"+
    "\1\62\6\177\5\0\2\5\1\0\1\220\1\223\1\5"+
    "\1\177\1\221\1\224\3\5\1\177\1\5\1\177\1\5"+
    "\1\0\2\5\1\0\1\5\1\177\3\5\2\0\3\5"+
    "\3\0\13\5\5\0\2\5\1\0\2\225\4\5\1\226"+
    "\6\5\1\227\2\5\1\0\5\5\2\0\2\5\1\225"+
    "\3\0\13\5\5\0\2\5\1\0\6\5\1\230\6\5"+
    "\1\0\2\5\1\0\5\5\2\0\3\5\3\0\13\5"+
    "\5\0\2\5\1\0\12\5\2\231\1\5\1\0\2\5"+
    "\1\0\5\5\2\0\3\5\3\0\3\5\1\177\1\62"+
    "\6\177\5\0\2\5\1\0\1\5\1\177\1\5\1\177"+
    "\1\5\1\177\1\230\2\5\1\177\1\5\1\177\1\5"+
    "\1\0\2\5\1\0\1\5\1\177\3\5\2\0\3\5"+
    "\3\0\3\5\1\177\1\62\6\177\5\0\2\5\1\0"+
    "\1\5\1\177\1\5\1\177\1\5\1\177\3\5\1\177"+
    "\1\231\1\232\1\5\1\0\2\5\1\0\1\5\1\177"+
    "\3\5\2\0\3\5\3\0\13\5\5\0\2\5\1\0"+
    "\2\225\13\5\1\227\2\5\1\0\5\5\2\0\2\5"+
    "\1\225\3\0\13\5\5\0\1\233\1\5\1\0\15\5"+
    "\1\0\2\5\1\0\5\5\2\0\3\5\3\0\2\5"+
    "\1\234\10\5\5\0\2\5\1\0\15\5\1\0\2\5"+
    "\1\0\5\5\2\0\3\5\26\0\2\235\2\0\2\236"+
    "\7\0\1\237\14\0\1\237\6\0\1\240\2\0\1\241"+
    "\1\242\33\0\1\133\15\0\1\5\1\243\11\5\5\0"+
    "\2\5\1\0\15\5\1\0\2\5\1\0\5\5\2\0"+
    "\3\5\42\0\1\244\21\0\13\5\5\0\2\5\1\0"+
    "\14\5\1\245\1\0\2\5\1\0\5\5\2\0\3\5"+
    "\3\0\13\5\5\0\2\5\1\0\2\5\2\246\2\5"+
    "\1\247\6\5\1\0\2\5\1\0\5\5\2\0\3\5"+
    "\3\0\13\5\5\0\2\5\1\0\15\5\1\0\2\5"+
    "\1\0\2\250\3\5\2\0\3\5\3\0\13\5\5\0"+
    "\2\5\1\0\12\5\2\251\1\5\1\0\2\5\1\0"+
    "\5\5\2\0\3\5\3\0\13\5\5\0\2\5\1\0"+
    "\2\5\2\252\11\5\1\0\2\5\1\0\5\5\2\0"+
    "\3\5\3\0\13\5\5\0\2\5\1\0\14\5\1\253"+
    "\1\0\2\5\1\0\5\5\2\0\3\5\3\0\13\5"+
    "\5\0\2\5\1\0\4\5\2\254\7\5\1\0\2\5"+
    "\1\0\5\5\2\0\3\5\3\0\13\5\5\0\2\5"+
    "\1\0\2\255\2\5\2\256\7\5\1\237\2\5\1\0"+
    "\5\5\2\0\2\5\1\257\3\0\3\5\1\260\2\5"+
    "\1\261\1\262\3\5\5\0\2\5\1\0\15\5\1\0"+
    "\2\5\1\133\5\5\2\0\3\5\3\0\13\5\5\0"+
    "\2\5\1\0\2\263\13\5\1\264\2\5\1\0\5\5"+
    "\2\0\2\5\1\265\3\0\1\5\1\266\11\5\5\0"+
    "\2\5\1\0\15\5\1\0\2\5\1\0\5\5\2\0"+
    "\3\5\4\0\1\267\57\0\1\5\1\270\11\5\5\0"+
    "\2\5\1\0\15\5\1\0\2\5\1\0\5\5\2\0"+
    "\3\5\3\0\13\5\5\0\2\5\1\0\2\5\2\271"+
    "\11\5\1\0\2\5\1\0\5\5\2\0\3\5\3\0"+
    "\13\5\5\0\2\5\1\0\2\5\2\272\11\5\1\0"+
    "\2\5\1\0\5\5\2\0\3\5\3\0\13\5\5\0"+
    "\2\5\1\0\7\5\1\273\5\5\1\274\2\5\1\0"+
    "\5\5\2\0\2\5\1\275\3\0\13\5\5\0\2\5"+
    "\1\0\14\5\1\276\1\0\2\5\1\0\5\5\2\0"+
    "\3\5\7\0\1\277\54\0\4\5\1\300\6\5\5\0"+
    "\2\5\1\0\15\5\1\0\2\5\1\0\5\5\2\0"+
    "\3\5\3\0\1\5\1\130\11\5\5\0\2\5\1\0"+
    "\15\5\1\0\2\5\1\0\5\5\2\0\3\5\4\0"+
    "\1\126\57\0\13\5\5\0\2\5\1\0\6\5\1\301"+
    "\6\5\1\0\2\5\1\0\5\5\2\0\3\5\4\0"+
    "\1\302\60\0\1\303\57\0\1\5\1\304\11\5\5\0"+
    "\2\5\1\0\15\5\1\0\2\5\1\0\5\5\2\0"+
    "\3\5\3\0\1\5\1\305\11\5\5\0\2\5\1\0"+
    "\15\5\1\0\2\5\1\0\5\5\2\0\3\5\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4704];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\5\11\36\1\1\0\13\1\1\0"+
    "\1\11\5\0\2\1\1\11\23\1\1\11\3\1\1\11"+
    "\1\0\1\11\2\1\1\0\22\1\1\0\4\1\1\11"+
    "\3\1\1\11\7\1\1\0\1\1\7\11\22\1\1\11"+
    "\1\1\3\11\1\1\1\11\17\1\1\11\2\1\1\11"+
    "\4\1\1\11\2\1\1\11\2\1\2\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol symbol(int type){
        parser.linea  += yytext();
        return new Symbol(type, yyline, yycolumn);
    }
    
    private Symbol symbol(int type, Object object){
        parser.linea  += yytext();
        return new Symbol(type, yyline, yycolumn, object);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return 0;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.err.println("Lexical Error <" + yytext() + "> line: " + (yyline + 1) + ", column: " + (yycolumn + 1));
            } 
            // fall through
          case 94: break;
          case 2: 
            { return symbol(sym.ETI, new String (yytext()));
            } 
            // fall through
          case 95: break;
          case 3: 
            { return symbol(sym.R, new String (yytext()));
            } 
            // fall through
          case 96: break;
          case 4: 
            { return symbol(sym.B, new String (yytext()));
            } 
            // fall through
          case 97: break;
          case 5: 
            { return symbol(sym.REG, new String (yytext()));
            } 
            // fall through
          case 98: break;
          case 6: 
            { return symbol(sym.N, new String (yytext()));
            } 
            // fall through
          case 99: break;
          case 7: 
            { return symbol(sym.LPAR, new String (yytext()));
            } 
            // fall through
          case 100: break;
          case 8: 
            { return symbol(sym.RPAR, new String (yytext()));
            } 
            // fall through
          case 101: break;
          case 9: 
            { return symbol(sym.COMA, new String (yytext()));
            } 
            // fall through
          case 102: break;
          case 10: 
            { return symbol(sym.MAS, new String (yytext()));
            } 
            // fall through
          case 103: break;
          case 11: 
            { return symbol(sym.DOS, new String (yytext()));
            } 
            // fall through
          case 104: break;
          case 12: 
            { return  symbol(sym.P, new String (yytext()));
            } 
            // fall through
          case 105: break;
          case 13: 
            { return symbol(sym.A, new String (yytext()));
            } 
            // fall through
          case 106: break;
          case 14: 
            { return symbol(sym.C, new String (yytext()));
            } 
            // fall through
          case 107: break;
          case 15: 
            { return symbol(sym.I, new String (yytext()));
            } 
            // fall through
          case 108: break;
          case 16: 
            { return  symbol(sym.M, new String (yytext()));
            } 
            // fall through
          case 109: break;
          case 17: 
            { parser.linea  += yytext();
            } 
            // fall through
          case 110: break;
          case 18: 
            { return symbol(sym.Z, new String (yytext()));
            } 
            // fall through
          case 111: break;
          case 19: 
            { parser.linea  += yytext().substring(0, yytext().length() -1); return new Symbol(sym.COM, yyline, yycolumn, new String (yytext()));
            } 
            // fall through
          case 112: break;
          case 20: 
            { return new Symbol(sym.SL, new String (yytext()));
            } 
            // fall through
          case 113: break;
          case 21: 
            { return symbol(sym.OR, new String (yytext()));
            } 
            // fall through
          case 114: break;
          case 22: 
            { return symbol(sym.RR, new String (yytext()));
            } 
            // fall through
          case 115: break;
          case 23: 
            { return symbol(sym.RL, new String (yytext()));
            } 
            // fall through
          case 116: break;
          case 24: 
            { return symbol(sym.NN, new String (yytext().substring(0, yytext().length() -1)));
            } 
            // fall through
          case 117: break;
          case 25: 
            { return symbol(sym.HL, new String (yytext()));
            } 
            // fall through
          case 118: break;
          case 26: 
            { return symbol(sym.PO, new String (yytext()));
            } 
            // fall through
          case 119: break;
          case 27: 
            { return symbol(sym.PE, new String (yytext()));
            } 
            // fall through
          case 120: break;
          case 28: 
            { return symbol(sym.SP, new String (yytext()));
            } 
            // fall through
          case 121: break;
          case 29: 
            { return symbol(sym.DE, new String (yytext()));
            } 
            // fall through
          case 122: break;
          case 30: 
            { return symbol(sym.DI, new String (yytext()));
            } 
            // fall through
          case 123: break;
          case 31: 
            { return symbol(sym.DJ, new String (yytext()));
            } 
            // fall through
          case 124: break;
          case 32: 
            { return symbol(sym.AF, new String (yytext()));
            } 
            // fall through
          case 125: break;
          case 33: 
            { return symbol(sym.CP, new String (yytext()));
            } 
            // fall through
          case 126: break;
          case 34: 
            { return symbol(sym.LD, new String (yytext()));
            } 
            // fall through
          case 127: break;
          case 35: 
            { return symbol(sym.NC, new String (yytext()));
            } 
            // fall through
          case 128: break;
          case 36: 
            { return symbol(sym.NZ, new String (yytext()));
            } 
            // fall through
          case 129: break;
          case 37: 
            { return symbol(sym.EI, new String (yytext()));
            } 
            // fall through
          case 130: break;
          case 38: 
            { return symbol(sym.IN, new String (yytext()));
            } 
            // fall through
          case 131: break;
          case 39: 
            { return symbol(sym.IX, new String (yytext()));
            } 
            // fall through
          case 132: break;
          case 40: 
            { return symbol(sym.IY, new String (yytext()));
            } 
            // fall through
          case 133: break;
          case 41: 
            { return symbol(sym.BC, new String (yytext()));
            } 
            // fall through
          case 134: break;
          case 42: 
            { return symbol(sym.JR, new String (yytext()));
            } 
            // fall through
          case 135: break;
          case 43: 
            { return symbol(sym.JP, new String (yytext()));
            } 
            // fall through
          case 136: break;
          case 44: 
            { return symbol(sym.ORG, new String (yytext()));
            } 
            // fall through
          case 137: break;
          case 45: 
            { return symbol(sym.OUT, new String (yytext()));
            } 
            // fall through
          case 138: break;
          case 46: 
            { return symbol(sym.RRD, new String (yytext()));
            } 
            // fall through
          case 139: break;
          case 47: 
            { return symbol(sym.RRA, new String (yytext()));
            } 
            // fall through
          case 140: break;
          case 48: 
            { return symbol(sym.RRC, new String (yytext()));
            } 
            // fall through
          case 141: break;
          case 49: 
            { return symbol(sym.RST, new String (yytext()));
            } 
            // fall through
          case 142: break;
          case 50: 
            { return symbol(sym.RLD, new String (yytext()));
            } 
            // fall through
          case 143: break;
          case 51: 
            { return symbol(sym.RLA, new String (yytext()));
            } 
            // fall through
          case 144: break;
          case 52: 
            { return symbol(sym.RLC, new String (yytext()));
            } 
            // fall through
          case 145: break;
          case 53: 
            { return symbol(sym.RES, new String (yytext()));
            } 
            // fall through
          case 146: break;
          case 54: 
            { return symbol(sym.RET, new String (yytext()));
            } 
            // fall through
          case 147: break;
          case 55: 
            { return symbol(sym.PH, new String (yytext().substring(0, yytext().length() -1)));
            } 
            // fall through
          case 148: break;
          case 56: 
            { return symbol(sym.POP, new String (yytext()));
            } 
            // fall through
          case 149: break;
          case 57: 
            { return symbol(sym.SRA, new String (yytext()));
            } 
            // fall through
          case 150: break;
          case 58: 
            { return symbol(sym.SRL, new String (yytext()));
            } 
            // fall through
          case 151: break;
          case 59: 
            { return symbol(sym.SUB, new String (yytext()));
            } 
            // fall through
          case 152: break;
          case 60: 
            { return symbol(sym.SCF, new String (yytext()));
            } 
            // fall through
          case 153: break;
          case 61: 
            { return symbol(sym.SLA, new String (yytext()));
            } 
            // fall through
          case 154: break;
          case 62: 
            { return symbol(sym.SET, new String (yytext()));
            } 
            // fall through
          case 155: break;
          case 63: 
            { return symbol(sym.SBC, new String (yytext()));
            } 
            // fall through
          case 156: break;
          case 64: 
            { return symbol(sym.DAA, new String (yytext()));
            } 
            // fall through
          case 157: break;
          case 65: 
            { return symbol(sym.DEC, new String (yytext()));
            } 
            // fall through
          case 158: break;
          case 66: 
            { return symbol(sym.ADD, new String (yytext()));
            } 
            // fall through
          case 159: break;
          case 67: 
            { return symbol(sym.ADC, new String (yytext()));
            } 
            // fall through
          case 160: break;
          case 68: 
            { return symbol(sym.AND, new String (yytext()));
            } 
            // fall through
          case 161: break;
          case 69: 
            { return symbol(sym.CPL, new String (yytext()));
            } 
            // fall through
          case 162: break;
          case 70: 
            { return symbol(sym.CCF, new String (yytext()));
            } 
            // fall through
          case 163: break;
          case 71: 
            { return symbol(sym.NOP, new String (yytext()));
            } 
            // fall through
          case 164: break;
          case 72: 
            { return symbol(sym.NEG, new String (yytext()));
            } 
            // fall through
          case 165: break;
          case 73: 
            { return symbol(sym.IND, new String (yytext()));
            } 
            // fall through
          case 166: break;
          case 74: 
            { return symbol(sym.INC, new String (yytext()));
            } 
            // fall through
          case 167: break;
          case 75: 
            { return symbol(sym.INI, new String (yytext()));
            } 
            // fall through
          case 168: break;
          case 76: 
            { return symbol(sym.IM0, new String (yytext()));
            } 
            // fall through
          case 169: break;
          case 77: 
            { return symbol(sym.IM1, new String (yytext()));
            } 
            // fall through
          case 170: break;
          case 78: 
            { return symbol(sym.IM2, new String (yytext()));
            } 
            // fall through
          case 171: break;
          case 79: 
            { return symbol(sym.XOR, new String (yytext()));
            } 
            // fall through
          case 172: break;
          case 80: 
            { return symbol(sym.BIT, new String (yytext()));
            } 
            // fall through
          case 173: break;
          case 81: 
            { return symbol(sym.OUTD, new String (yytext()));
            } 
            // fall through
          case 174: break;
          case 82: 
            { return symbol(sym.OUTI, new String (yytext()));
            } 
            // fall through
          case 175: break;
          case 83: 
            { return symbol(sym.OTDR, new String (yytext()));
            } 
            // fall through
          case 176: break;
          case 84: 
            { return symbol(sym.OTIR, new String (yytext()));
            } 
            // fall through
          case 177: break;
          case 85: 
            { return symbol(sym.RRCA, new String (yytext()));
            } 
            // fall through
          case 178: break;
          case 86: 
            { return symbol(sym.RLCA, new String (yytext()));
            } 
            // fall through
          case 179: break;
          case 87: 
            { return symbol(sym.RETN, new String (yytext()));
            } 
            // fall through
          case 180: break;
          case 88: 
            { return symbol(sym.RETI, new String (yytext()));
            } 
            // fall through
          case 181: break;
          case 89: 
            { return symbol(sym.HALT, new String (yytext()));
            } 
            // fall through
          case 182: break;
          case 90: 
            { return symbol(sym.PUSH, new String (yytext()));
            } 
            // fall through
          case 183: break;
          case 91: 
            { return symbol(sym.CALL, new String (yytext()));
            } 
            // fall through
          case 184: break;
          case 92: 
            { return symbol(sym.INDR, new String (yytext()));
            } 
            // fall through
          case 185: break;
          case 93: 
            { return symbol(sym.INIR, new String (yytext()));
            } 
            // fall through
          case 186: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
